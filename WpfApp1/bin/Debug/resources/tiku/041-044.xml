<?xml version="1.0" encoding="gb2312"?>
<PaperSetter checked="true">
    <PaperDetail xml:space="preserve"><PaperVersion>1</PaperVersion><PaperID>1</PaperID><PaperName>1</PaperName><PaperAuthor>1</PaperAuthor><PaperTotalTime unit="hour">3</PaperTotalTime><PaperStartTime zone="+8">1</PaperStartTime><PaperProblemSum>4</PaperProblemSum><PublicKey>MIHxMIGoBgcqhkjOOAQBMIGcAkEA/KaCzo4Syrom78z3EQ5SbbB4sF7ey80etKII864WF64B81uRpH5t9jQTxeEu0ImbzRMqzVDZkVG9xD7nN1kuFwIVAJYu3cw2nLqOuyYO5rahJtk0bjjFAkBnhHGyepz0TukaScUUfbGpqvJE8FpDTWSGkx0tFCcbnjUDC3H9c9oXkGmzLik1Yw4cIGI1TQ2iCmxBblC+eUykA0QAAkEA8ojKBedYrFoDBvrk2cvh998qmKFuHB0gXegkDXzHhk+yUprBGbpdLHVDWq8P7hPLyNPuviEvJoxz4x5kqiidgQ==</PublicKey><Signature>MC0CFQCIx+KTReP/0tGqp7nAswXDvCCIOwIUQv2ipRZPRYLfq/1LHkV2lKzirqw=</Signature><PaperReference><![CDATA[1]]></PaperReference><PaperDescribe><![CDATA[登陆及提交说明<BR>
请不要擅自操作键盘和鼠标，根据现场工作的人员的指示操作。<BR>
<BR>
<BR>
2)试题描述说明<BR>
试题主要是描述了一个问题，并请你用程序来解决这个问题。一般来说，你所编写的程序应该能够接受题目中所描述的数据，按照题目的描述处理这些数据，并且严格按照输出描述(The Output)中所述的格式输出结果。程序将提交到服务器进行打分。打分详情可见‘3)打分说明’部分。<BR>
试题主要分为六部分: <BR>
1.标题<BR>
包括试题的主标题，以及副标题Time Limit部分，Time Limit表示所提交的答题程序所能运行的最长时间，如果超过这个时间，程序无论输出是否正确，都将被裁判端判为Time Limit Exceed。<BR>
比如Time Limit是10 sec(10秒)。如果提交的答题程序运行时间超过10秒，则会被判为Time Limit Exceed，无论答题程序输出是否正确，也就是说在10秒内答题程序输出的结果正确或错误都不会得到任何提示。<BR>
<BR>
2.Descripiton<BR>
题目描述，作为题目的主要部分，对问题进行详细的说明。<BR>
<BR>
3.The Input<BR>
输入描述部分，这部分描述了输入数据及其格式和范围。输入答题程序的数据将严格按照这部分的描述。<BR>
<BR>
4.The Output<BR>
输出描述，这部分描述了答题程序所应该输出的数据及其格式。答题程序必须按照这部分的描述来输出，否则很有可能无法通过裁判端的测试。<BR>
<BR>
5.Sample Input<BR>
输入样例，以实例来说明输入数据的格式。请注意这里的数据只是作为实例，并不代表实际测试答题程序的数据是这些。因此能正确处理Sample中的数据并不代表程序一定能通过。不过，Sample数据一定是实际测试数据的子集，因此不能正确处理Sample就一定无法在裁判端通过。所以没有通过Sample的程序最好不要贸然提交。
<BR>
6.Sample Output<BR>
对应输入样例的输出数据，用来说明答题程序所应输出的格式。答题程序的输出应该严格按照这部分所示输出。比如：<BR>
在Sample Output中有两个整数独占一行，并且以空格分隔，如下：<BR>
2 3<BR>
那么如下的输出都是错误的：<BR>
a=2 b=3<BR>
或<BR>
2       3<BR>
或<BR>
3 2<BR>
必须严格按照Sample Output中所示的格式输出才有可能通过裁判端打分。<BR>
<BR>
3)打分说明<BR>
打分结果	评判标准<BR>
Compile Error	编译错<BR>
Time Limited Exceeded	程序运行超过时间限制<BR>
Run Time Error	程序运行错误<BR>
Wrong Answer	输出结果中关键数据错误<BR>
Presentation Error	格式错<BR>
Accepted	输出结果完全正确<BR>


4)程序编写说明<BR>
1.C/C++<BR>
首先，必须注意程序的main函数需要定义成int型，然后必须return 0。<BR>
其次，如果输入描述(The Output)中没有明确规定输入结束标志或说以EOF结束，那么可以使用如下格式来读入：<BR>
<BR>
while(cin>>a)或while(scanf("%d",&a)==1)<BR>
<BR>
注：这里while(scanf("%d",&a)==1)中的1是输入数据的数量，如果有两个则是：<BR>
while(scanf("%d %d",&a,&b)==2)<BR>
<BR>]]></PaperDescribe></PaperDetail>
    <ProblemList encrypted="0">
        <ProblemArchive version="1.0" checked="true">
            <Title>Problem 41 请给我加密</Title>
            <Author>朱星垠</Author>
            <Problem contentType="html">
                <Description xml:space="preserve">编写一个加密程序，将一个英文句子加密后输出。加密译码规则为：&lt;BR&gt;
1.由键盘输入英文句子和密钥M（20≤M≤50）；&lt;BR&gt;
2.将其中的英文字符都变为大写，用数字1..26 分别代表‘A’..‘Z’并加上密钥M后输出；&lt;BR&gt;
3.将其中的空格用数字‘0’输出；&lt;BR&gt;
4.其它符号则变成其ASCII序号加上100输出；&lt;BR&gt;
5.输出的数字之间用空格分隔。</Description>
                <InputSpec xml:space="preserve">你的程序需要从标准输入设备（通常为键盘）中读入多组测试数据。
第一行输入为输入数据的组数n。
每组输入包括两行，第一行为英文原句，可能包含一个或多个空格，第二行为密钥M（20≤M≤50），M为整数。</InputSpec>
                <OutputSpec xml:space="preserve">对应每组输入，你的程序需要向标准输出设备（通常为启动该程序的终端）依次输出一组对应的答案：一行加密后的句子，中间以一个空格隔开，行首行尾无空格。</OutputSpec>
            </Problem>
            <TestData>
                <TimeLimit>1</TimeLimit>
                <InputFile />
                <OutputFile />
                <InputFormat inputType="num">
                    <Terminator xml:space="preserve" />
                    <Seperator xml:space="preserve" layout="bottom" />
                </InputFormat>
                <OutputFormat>
                    <Header xml:space="preserve" />
                    <Footer xml:space="preserve" />
                    <Seperator xml:space="preserve" layout="bottom" />
                </OutputFormat>
                <TestCase difficulty="sample">
                    <TestInput xml:space="preserve">abc
30
</TestInput>
                    <TestOutput xml:space="preserve">31 32 33
</TestOutput>
                </TestCase>
                <TestCase difficulty="special">
                    <TestInput xml:space="preserve">d*ew 123
40
</TestInput>
                    <TestOutput xml:space="preserve">44 142 45 63 0 149 150 151
</TestOutput>
                </TestCase>
                <TestCase difficulty="sample">
                    <TestInput xml:space="preserve">i love acm!
35
</TestInput>
                    <TestOutput xml:space="preserve">44 0 47 50 57 40 0 36 38 48 133
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">accepted
40
</TestInput>
                    <TestOutput xml:space="preserve">41 43 43 45 56 60 45 44
</TestOutput>
                </TestCase>
                <TestCase difficulty="special">
                    <TestInput xml:space="preserve">@#$%^  &amp;*()!
30
</TestInput>
                    <TestOutput xml:space="preserve">164 135 136 137 194 0 0 138 142 140 141 133
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">dsaljda219ej9ds sada21s
0
</TestInput>
                    <TestOutput xml:space="preserve">4 19 1 12 10 4 1 150 149 157 5 10 157 4 19 0 19 1 4 1 150 149 19
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">a
0
</TestInput>
                    <TestOutput xml:space="preserve">1
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">3
1
</TestInput>
                    <TestOutput xml:space="preserve">151
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">123 ad sad    
10
</TestInput>
                    <TestOutput xml:space="preserve">149 150 151 0 11 14 0 29 11 14 0 0 0 0
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">                                     
101
</TestInput>
                    <TestOutput xml:space="preserve">0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
</TestOutput>
                </TestCase>
            </TestData>
            <Solution xml:space="preserve" language="cpp" filename="example9_2">#include&lt;iostream&gt;
#include&lt;cstring&gt;

using namespace std;

void print(char c,int m)
{
	if (c == ' ')
	{
		cout&lt;&lt;0;
		return;
	}
	if (c&gt;='a' &amp;&amp; c &lt;= 'z')
	c = c-'a'+'A';
	if (c&gt;='A' &amp;&amp; c &lt;= 'Z')
	cout&lt;&lt;int(c-'A'+m+1);
	else
	cout&lt;&lt;int(c+100);
}

int main()
{
	int n , m , i , len;
	char s[100];
	cin&gt;&gt;n;
	while(n--)
	{
		cin.getline(s,100);//read blank
		cin.getline(s,100);
		cin&gt;&gt;m;
		len = strlen(s);
		print(s[0] , m);
		for (i=1; i &lt; len; i++)
		{
			cout&lt;&lt;" ";
			print(s[i],m);
		}
		cout&lt;&lt;endl;
	}
	return 0;
}</Solution>
        </ProblemArchive>
        <ProblemArchive version="1.0" checked="true">
            <Title>Problem 42 排序</Title>
            <Author>朱星垠</Author>
            <Problem contentType="html">
                <Description xml:space="preserve">输入10个数，对其进行升序排序。</Description>
                <InputSpec xml:space="preserve">你的程序需要从标准输入设备（通常为键盘）中读入多组测试数据。第一行输入为输入数据的组数n，接下来就有n组测试数据，每组测试数据一行包含10个不大于100的正整数。它们以空格分隔，在行首和行尾没有多余的空格。</InputSpec>
                <OutputSpec xml:space="preserve">对每组测试数据，你的程序需要向标准输出设备（通常为启动该程序的终端）依次输出一组对应的答案：输出10个排好序的数(升序)。每组输出数据由一行组成，每行由十个数组成，在行首和行尾没有多余的空格。两组数据之间也没有多余的空行。</OutputSpec>
            </Problem>
            <TestData>
                <TimeLimit>2</TimeLimit>
                <InputFile />
                <OutputFile />
                <InputFormat inputType="num">
                    <Terminator xml:space="preserve" />
                    <Seperator xml:space="preserve" layout="bottom" />
                </InputFormat>
                <OutputFormat>
                    <Header xml:space="preserve" />
                    <Footer xml:space="preserve" />
                    <Seperator xml:space="preserve" layout="bottom" />
                </OutputFormat>
                <TestCase difficulty="sample">
                    <TestInput xml:space="preserve">1 2 3 4 5 6 7 8 9 10
</TestInput>
                    <TestOutput xml:space="preserve">1 2 3 4 5 6 7 8 9 10
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">1 2 3 4 5 6 8 7 9 10
</TestInput>
                    <TestOutput xml:space="preserve">1 2 3 4 5 6 7 8 9 10
</TestOutput>
                </TestCase>
                <TestCase difficulty="sample">
                    <TestInput xml:space="preserve">10 9 8 7 6 5 4 3 2 1
</TestInput>
                    <TestOutput xml:space="preserve">1 2 3 4 5 6 7 8 9 10
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">1 100 1 100 1 100 1 100 1 100
</TestInput>
                    <TestOutput xml:space="preserve">1 1 1 1 1 100 100 100 100 100
</TestOutput>
                </TestCase>
                <TestCase difficulty="special">
                    <TestInput xml:space="preserve">2 2 2 2 2 2 2 2 2 2
</TestInput>
                    <TestOutput xml:space="preserve">2 2 2 2 2 2 2 2 2 2
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">1 9 9 9 9 9 9 9 9 9
</TestInput>
                    <TestOutput xml:space="preserve">1 9 9 9 9 9 9 9 9 9
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">2 2 2 2 2 6 6 6 6 6
</TestInput>
                    <TestOutput xml:space="preserve">2 2 2 2 2 6 6 6 6 6
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">6 6 6 6 6 2 2 2 2 2
</TestInput>
                    <TestOutput xml:space="preserve">2 2 2 2 2 6 6 6 6 6
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">1 11 21 31 41 51 61 71 81 91
</TestInput>
                    <TestOutput xml:space="preserve">1 11 21 31 41 51 61 71 81 91
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">91 81 71 61 51 41 31 21 11 1
</TestInput>
                    <TestOutput xml:space="preserve">1 11 21 31 41 51 61 71 81 91
</TestOutput>
                </TestCase>
            </TestData>
            <Solution xml:space="preserve" language="cpp" filename="23">#include&lt;iostream&gt;
#include&lt;cstdlib&gt;
using namespace std;
int judge(const void *a,const void *b)
{
	return *(int*)a-*(int*)b;
}
int main()
{	
	int n;
	cin&gt;&gt;n;
	int i;
	for(i=0;i&lt;n;i++)
	{
		int j;
		int a[10];
		for(j=0;j&lt;10;j++)cin&gt;&gt;a[j];
		qsort(a,10,sizeof(int),judge);
		for(j=0;j&lt;10;j++)
		{
			if(j!=0)
				cout&lt;&lt;' ';
			cout&lt;&lt;a[j];
		}
		cout&lt;&lt;endl;
	}
	return 0;
}</Solution>
        </ProblemArchive>
        <ProblemArchive version="1.0" checked="true">
            <Title>Problem 43 回文问题</Title>
            <Author>朱星垠</Author>
            <Problem contentType="html">
                <Description xml:space="preserve">输入一串字符，其长度小于200，判断该串字符是否构成回文。
所谓回文是指从左到右和从右到左读一串字符的值是一样的，如：ABCBA。
</Description>
                <InputSpec xml:space="preserve">你的程序需要从标准输入设备（通常为键盘）中读入多组测试数据。每组输入数据由一行字符组成，它们之间没有空格，在行首和行尾没有多余的空格。
</InputSpec>
                <OutputSpec xml:space="preserve">对每组测试数据，你的程序需要向标准输出设备（通常为启动该程序的终端）依次输出一组对应的答案：构成回文的输出Yes ，反之输出 No。所有数据前后没有多余的空格，两组数据之间也没有多余的空行。
</OutputSpec>
            </Problem>
            <TestData>
                <TimeLimit>1</TimeLimit>
                <InputFile />
                <OutputFile />
                <InputFormat inputType="eof">
                    <Terminator xml:space="preserve" />
                    <Seperator xml:space="preserve" layout="bottom" />
                </InputFormat>
                <OutputFormat>
                    <Header xml:space="preserve" />
                    <Footer xml:space="preserve" />
                    <Seperator xml:space="preserve" layout="bottom" />
                </OutputFormat>
                <TestCase difficulty="sample">
                    <TestInput xml:space="preserve">abcba
</TestInput>
                    <TestOutput xml:space="preserve">Yes
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">a
</TestInput>
                    <TestOutput xml:space="preserve">Yes
</TestOutput>
                </TestCase>
                <TestCase difficulty="special">
                    <TestInput xml:space="preserve">b
</TestInput>
                    <TestOutput xml:space="preserve">Yes
</TestOutput>
                </TestCase>
                <TestCase difficulty="sample">
                    <TestInput xml:space="preserve">adfgfdah
</TestInput>
                    <TestOutput xml:space="preserve">No
</TestOutput>
                </TestCase>
                <TestCase difficulty="sample">
                    <TestInput xml:space="preserve">oppo
</TestInput>
                    <TestOutput xml:space="preserve">Yes
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">abcdefg
</TestInput>
                    <TestOutput xml:space="preserve">No
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">aaaaaaaaaaaaaaaaaa
</TestInput>
                    <TestOutput xml:space="preserve">Yes
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">aaaaaaaaaaaaaaaaaaaaaaaaaab
</TestInput>
                    <TestOutput xml:space="preserve">No
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">abcdba
</TestInput>
                    <TestOutput xml:space="preserve">No
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">atytb
</TestInput>
                    <TestOutput xml:space="preserve">No
</TestOutput>
                </TestCase>
            </TestData>
            <Solution xml:space="preserve" language="cpp" filename="erwe">#include&lt;cstring&gt;
#include&lt;iostream&gt;

using namespace std;

char s[300];

int main()
{
	while(cin&gt;&gt;s)
	{
		int l;
		l = strlen(s);
		int i,j;
		i = 0;
               j = l-1;
		while(j&gt;i&amp;&amp;s[i]==s[j])
		{
			i++;
			j--;
		}
		if (j&lt;=i) cout&lt;&lt;"Yes"&lt;&lt;endl;
		else cout&lt;&lt;"No"&lt;&lt;endl;
	}
	return 0;
}</Solution>
        </ProblemArchive>
        <ProblemArchive version="1.0" checked="true">
            <Title>Problem 44 输出正整数对应的二进制数</Title>
            <Author>朱星垠</Author>
            <Problem contentType="html">
                <Description xml:space="preserve">输入一个十进制正整数，输出它的二进制数。</Description>
                <InputSpec xml:space="preserve">你的程序需要从标准输入设备（通常为键盘）中读入多组测试数据。每组输入数据由一行组成，其中包含一个正整数n,0≤n≤1024，所有数据前后没有多余的空格，两组数据之间也没有多余的空行。</InputSpec>
                <OutputSpec xml:space="preserve">对每组测试数据，你的程序需要向标准输出设备（通常为启动该程序的终端）依次输出一组对应的答案。每组输出数据由一行组成，包含输入整数对应的二进制数，所有数据前后没有多余的空格，两组数据之间也没有多余的空行。</OutputSpec>
            </Problem>
            <TestData>
                <TimeLimit>1</TimeLimit>
                <InputFile />
                <OutputFile />
                <InputFormat inputType="eof">
                    <Terminator xml:space="preserve" />
                    <Seperator xml:space="preserve" layout="bottom" />
                </InputFormat>
                <OutputFormat>
                    <Header xml:space="preserve" />
                    <Footer xml:space="preserve" />
                    <Seperator xml:space="preserve" layout="bottom" />
                </OutputFormat>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">0
</TestInput>
                    <TestOutput xml:space="preserve">0
</TestOutput>
                </TestCase>
                <TestCase difficulty="sample">
                    <TestInput xml:space="preserve">1
</TestInput>
                    <TestOutput xml:space="preserve">1
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">1000
</TestInput>
                    <TestOutput xml:space="preserve">1111101000
</TestOutput>
                </TestCase>
                <TestCase difficulty="special">
                    <TestInput xml:space="preserve">1024
</TestInput>
                    <TestOutput xml:space="preserve">10000000000
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">10
</TestInput>
                    <TestOutput xml:space="preserve">1010
</TestOutput>
                </TestCase>
                <TestCase difficulty="sample">
                    <TestInput xml:space="preserve">4
</TestInput>
                    <TestOutput xml:space="preserve">100
</TestOutput>
                </TestCase>
            </TestData>
            <Solution xml:space="preserve" language="cpp" filename="52">#include&lt;iostream&gt;
using namespace std;
int main()
{
	char result[11],len=0;
	int n;
	while(cin&gt;&gt;n)
	{
		len=0;
		if(n==0)
		{
			cout&lt;&lt;0&lt;&lt;endl;
			continue;
		}
		while(n&gt;0)
		{
			if(n&amp;1)
				result[len++]='1';
			else
				result[len++]='0';
			n&gt;&gt;=1;
		}
		for(int i=len-1;i&gt;=0;i--)
			cout&lt;&lt;result[i];
		cout&lt;&lt;endl;
	}
	return 0;
}
		</Solution>
        </ProblemArchive>
    </ProblemList>
</PaperSetter>

