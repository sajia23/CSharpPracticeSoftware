<?xml version="1.0" encoding="gb2312"?>
<PaperSetter checked="true">
    <PaperDetail xml:space="preserve"><PaperVersion>1</PaperVersion><PaperID>1</PaperID><PaperName>1</PaperName><PaperAuthor>1</PaperAuthor><PaperTotalTime unit="hour">3</PaperTotalTime><PaperStartTime zone="+8">1</PaperStartTime><PaperProblemSum>4</PaperProblemSum><PublicKey>MIHxMIGoBgcqhkjOOAQBMIGcAkEA/KaCzo4Syrom78z3EQ5SbbB4sF7ey80etKII864WF64B81uRpH5t9jQTxeEu0ImbzRMqzVDZkVG9xD7nN1kuFwIVAJYu3cw2nLqOuyYO5rahJtk0bjjFAkBnhHGyepz0TukaScUUfbGpqvJE8FpDTWSGkx0tFCcbnjUDC3H9c9oXkGmzLik1Yw4cIGI1TQ2iCmxBblC+eUykA0QAAkEA8ojKBedYrFoDBvrk2cvh998qmKFuHB0gXegkDXzHhk+yUprBGbpdLHVDWq8P7hPLyNPuviEvJoxz4x5kqiidgQ==</PublicKey><Signature>MCwCFBcPItzOxvEV7+DBz0Ml+ob4UP8GAhQrz0k6GPxVj9YNOMbloG/qX8w9vw==</Signature><PaperReference><![CDATA[1]]></PaperReference><PaperDescribe><![CDATA[登陆及提交说明<BR>
请不要擅自操作键盘和鼠标，根据现场工作的人员的指示操作。<BR>
<BR>
<BR>
2)试题描述说明<BR>
试题主要是描述了一个问题，并请你用程序来解决这个问题。一般来说，你所编写的程序应该能够接受题目中所描述的数据，按照题目的描述处理这些数据，并且严格按照输出描述(The Output)中所述的格式输出结果。程序将提交到服务器进行打分。打分详情可见‘3)打分说明’部分。<BR>
试题主要分为六部分: <BR>
1.标题<BR>
包括试题的主标题，以及副标题Time Limit部分，Time Limit表示所提交的答题程序所能运行的最长时间，如果超过这个时间，程序无论输出是否正确，都将被裁判端判为Time Limit Exceed。<BR>
比如Time Limit是10 sec(10秒)。如果提交的答题程序运行时间超过10秒，则会被判为Time Limit Exceed，无论答题程序输出是否正确，也就是说在10秒内答题程序输出的结果正确或错误都不会得到任何提示。<BR>
<BR>
2.Descripiton<BR>
题目描述，作为题目的主要部分，对问题进行详细的说明。<BR>
<BR>
3.The Input<BR>
输入描述部分，这部分描述了输入数据及其格式和范围。输入答题程序的数据将严格按照这部分的描述。<BR>
<BR>
4.The Output<BR>
输出描述，这部分描述了答题程序所应该输出的数据及其格式。答题程序必须按照这部分的描述来输出，否则很有可能无法通过裁判端的测试。<BR>
<BR>
5.Sample Input<BR>
输入样例，以实例来说明输入数据的格式。请注意这里的数据只是作为实例，并不代表实际测试答题程序的数据是这些。因此能正确处理Sample中的数据并不代表程序一定能通过。不过，Sample数据一定是实际测试数据的子集，因此不能正确处理Sample就一定无法在裁判端通过。所以没有通过Sample的程序最好不要贸然提交。
<BR>
6.Sample Output<BR>
对应输入样例的输出数据，用来说明答题程序所应输出的格式。答题程序的输出应该严格按照这部分所示输出。比如：<BR>
在Sample Output中有两个整数独占一行，并且以空格分隔，如下：<BR>
2 3<BR>
那么如下的输出都是错误的：<BR>
a=2 b=3<BR>
或<BR>
2       3<BR>
或<BR>
3 2<BR>
必须严格按照Sample Output中所示的格式输出才有可能通过裁判端打分。<BR>
<BR>
3)打分说明<BR>
打分结果	评判标准<BR>
Compile Error	编译错<BR>
Time Limited Exceeded	程序运行超过时间限制<BR>
Run Time Error	程序运行错误<BR>
Wrong Answer	输出结果中关键数据错误<BR>
Presentation Error	格式错<BR>
Accepted	输出结果完全正确<BR>


4)程序编写说明<BR>
1.C/C++<BR>
首先，必须注意程序的main函数需要定义成int型，然后必须return 0。<BR>
其次，如果输入描述(The Output)中没有明确规定输入结束标志或说以EOF结束，那么可以使用如下格式来读入：<BR>
<BR>
while(cin>>a)或while(scanf("%d",&a)==1)<BR>
<BR>
注：这里while(scanf("%d",&a)==1)中的1是输入数据的数量，如果有两个则是：<BR>
while(scanf("%d %d",&a,&b)==2)<BR>
<BR>]]></PaperDescribe></PaperDetail>
    <ProblemList encrypted="0">
        <ProblemArchive version="1.0" checked="true">
            <Title>Problem 57 学生信息</Title>
            <Author>孙辞海</Author>
            <Problem contentType="html">
                <Description xml:space="preserve">你的程序需要从标准输入设备（通常为键盘）中读入多组测试数据。输入N（1≤N≤10）个学生的信息，每项信息包含该学生的编号、姓名、性别、年龄、成绩共五项，除了这五项之间的4个空格外，无其他空格，按成绩进行排序，然后按成绩从低到高输出，输入保证没有相同的成绩。</Description>
                <InputSpec xml:space="preserve">首先输入一个N（1≤N≤10），代表有几条学生记录，接下来N行每行包含一条学生记录，按照编号、姓名、性别、年龄、成绩的顺序给出，在行首和行尾没有多余的空格。所有数据前后没有多余的空行，两组数据之间也没有多余的空行。</InputSpec>
                <OutputSpec xml:space="preserve">对每组测试数据，你的程序需要向标准输出设备（通常为启动该程序的文本终端，例如你在Windows中启动该程序所用的命令行终端）对学生的成绩按升序排序后输出所有学生的信息，每行一条信息。所有数据前后没有多余的空行，两组数据之间也没有多余的空行。在行首和行尾没有多余的空格。</OutputSpec>
            </Problem>
            <TestData>
                <TimeLimit>2</TimeLimit>
                <InputFile />
                <OutputFile />
                <InputFormat inputType="num">
                    <Terminator xml:space="preserve" />
                    <Seperator xml:space="preserve" layout="bottom" />
                </InputFormat>
                <OutputFormat>
                    <Header xml:space="preserve" />
                    <Footer xml:space="preserve" />
                    <Seperator xml:space="preserve" layout="bottom" />
                </OutputFormat>
                <TestCase difficulty="sample">
                    <TestInput xml:space="preserve">1 aa male 13 1
</TestInput>
                    <TestOutput xml:space="preserve">2 bb female 14 0
</TestOutput>
                </TestCase>
                <TestCase difficulty="sample">
                    <TestInput xml:space="preserve">2 bb female 14 0
</TestInput>
                    <TestOutput xml:space="preserve">1 aa male 13 1
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">3 cc male 13 44
</TestInput>
                    <TestOutput xml:space="preserve">3 cc male 13 44
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">4 dd male 34 99
</TestInput>
                    <TestOutput xml:space="preserve">4 dd male 34 99
</TestOutput>
                </TestCase>
                <TestCase difficulty="special">
                    <TestInput xml:space="preserve">5 ee female 3 100
</TestInput>
                    <TestOutput xml:space="preserve">5 ee female 3 100
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">6 ge female 3 102
</TestInput>
                    <TestOutput xml:space="preserve">7 ge female 20 101
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">7 ge female 20 101
</TestInput>
                    <TestOutput xml:space="preserve">6 ge female 3 102
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">8 Ge female 20 110
</TestInput>
                    <TestOutput xml:space="preserve">8 Ge female 20 110
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">9 Gem male 20 112
</TestInput>
                    <TestOutput xml:space="preserve">9 Gem male 20 112
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">10 Gm male 20 113
</TestInput>
                    <TestOutput xml:space="preserve">10 Gm male 20 113
</TestOutput>
                </TestCase>
            </TestData>
            <Solution xml:space="preserve" language="cpp" filename="97">#include&lt;iostream&gt;
#include&lt;cstdlib&gt;
using namespace std;
struct stu{
	int id,age,mark;
	char name[10],sex[10];
}s[10];
int judge(const void *a ,const void *b)
{
	return ((stu*)a)-&gt;mark-((stu*)b)-&gt;mark;
}
int main()
{
	int i;
	int n;
	cin&gt;&gt;n;
	for(i=0;i&lt;n;i++)
		cin&gt;&gt;s[i].id&gt;&gt;s[i].name&gt;&gt;s[i].sex&gt;&gt;s[i].age&gt;&gt;s[i].mark;
	qsort(s,n,sizeof(stu),judge);
	for(i=0;i&lt;n;i++)
		cout&lt;&lt;s[i].id&lt;&lt;' '&lt;&lt;s[i].name&lt;&lt;' '&lt;&lt;s[i].sex&lt;&lt;' '&lt;&lt;s[i].age&lt;&lt;' '&lt;&lt;s[i].mark&lt;&lt;endl;
	return 0;
}</Solution>
        </ProblemArchive>
        <ProblemArchive version="1.0" checked="true">
            <Title>Problem 58 三角</Title>
            <Author>孙辞海</Author>
            <Problem contentType="html">
                <Description xml:space="preserve">给你3条线段的长度，判断用这3条线段是否能组成一个直角三角形或者三角形。</Description>
                <InputSpec xml:space="preserve">你的程序需要从标准输入设备（通常为键盘）中读入多组测试数据。先输入一个正整数n，表示有n组测试数据。在接下来的n行中，每行3个正整数a、b、c，代表3条线段的长度，在行首和行尾没有多余的空格。所有数据前后没有多余的空行，两组数据之间也没有多余的空行。</InputSpec>
                <OutputSpec xml:space="preserve">对每组测试数据，你的程序需要向标准输出设备（通常为启动该程序的文本终端，例如你在Windows中启动该程序所用的命令行终端）依次输出一组对应的答案。&lt;BR&gt;
对于每组输入，给出以下三个输出中的一个输出，只输出双引号中的内容。
&lt;p&gt;
1。“Can form a triangle”（能构成三角形）；
&lt;p&gt;
2。“Can form a right triangle”（能构成直角三角形）；
&lt;p&gt;
3。“Can not form a triangle”（不能构成三角形）；
&lt;p&gt;
注：若满足了第2条，无须输出第一条。</OutputSpec>
            </Problem>
            <TestData>
                <TimeLimit>1</TimeLimit>
                <InputFile />
                <OutputFile />
                <InputFormat inputType="num">
                    <Terminator xml:space="preserve" />
                    <Seperator xml:space="preserve" layout="bottom" />
                </InputFormat>
                <OutputFormat>
                    <Header xml:space="preserve" />
                    <Footer xml:space="preserve" />
                    <Seperator xml:space="preserve" layout="bottom" />
                </OutputFormat>
                <TestCase difficulty="sample">
                    <TestInput xml:space="preserve">3 4 5
</TestInput>
                    <TestOutput xml:space="preserve">Can form a right triangle
</TestOutput>
                </TestCase>
                <TestCase difficulty="sample">
                    <TestInput xml:space="preserve">4 5 6
</TestInput>
                    <TestOutput xml:space="preserve">Can form a triangle
</TestOutput>
                </TestCase>
                <TestCase difficulty="sample">
                    <TestInput xml:space="preserve">1 2 3
</TestInput>
                    <TestOutput xml:space="preserve">Can not form a triangle
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">7 24 25
</TestInput>
                    <TestOutput xml:space="preserve">Can form a right triangle
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">5 8 13
</TestInput>
                    <TestOutput xml:space="preserve">Can not form a triangle
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">7 8 9
</TestInput>
                    <TestOutput xml:space="preserve">Can form a triangle
</TestOutput>
                </TestCase>
                <TestCase difficulty="special">
                    <TestInput xml:space="preserve">25 24 7
</TestInput>
                    <TestOutput xml:space="preserve">Can form a right triangle
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">1 1 10
</TestInput>
                    <TestOutput xml:space="preserve">Can not form a triangle
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">1 1 1
</TestInput>
                    <TestOutput xml:space="preserve">Can form a triangle
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">1 1 2
</TestInput>
                    <TestOutput xml:space="preserve">Can not form a triangle
</TestOutput>
                </TestCase>
            </TestData>
            <Solution xml:space="preserve" language="cpp" filename="a.cpp">#include&lt;iostream.h&gt;
int main()
{
	int n,a[3],i,j;
	cin&gt;&gt;n;
	while(n--)
	{
		cin&gt;&gt;a[0]&gt;&gt;a[1]&gt;&gt;a[2];
		for(i=0;i&lt;3;i++)
			for(j=i+1;j&lt;3;j++)
				if(a[i]&gt;a[j])
					a[i]^=a[j]^=a[i]^=a[j];
		if(a[0]*a[0]+a[1]*a[1]==a[2]*a[2])
			cout&lt;&lt;"Can form a right triangle"&lt;&lt;endl;
		else if(a[0]+a[1]&gt;a[2])
			cout&lt;&lt;"Can form a triangle"&lt;&lt;endl;
		else cout&lt;&lt;"Can not form a triangle"&lt;&lt;endl;
	}
	return 0;
}</Solution>
        </ProblemArchive>
        <ProblemArchive version="1.0" checked="true">
            <Title>Problem 59 日期</Title>
            <Author>孙辞海</Author>
            <Problem contentType="html">
                <Description xml:space="preserve">输入星期日到星期六的英文缩写（Sun,Mon,Tue,Wed,Thu,Fri,Sat），输出其对应的完整单词。</Description>
                <InputSpec xml:space="preserve">你的程序需要从标准输入设备（通常为键盘）中读入多组测试数据。每行输入相关单词，在行首和行尾没有多余的空格。

</InputSpec>
                <OutputSpec xml:space="preserve">对每组测试数据，你的程序需要向标准输出设备（通常为启动该程序的文本终端，例如你在Windows中启动该程序所用的命令行终端）依次输出从标准输入设备中读入的每一组测试数据对应的结果。所有数据前后没有多余的空行，两组数据之间也没有多余的空行。每组输出数据由一行组成，该行为该英文单词的全称。
</OutputSpec>
            </Problem>
            <TestData>
                <TimeLimit>1</TimeLimit>
                <InputFile />
                <OutputFile />
                <InputFormat inputType="eof">
                    <Terminator xml:space="preserve" />
                    <Seperator xml:space="preserve" layout="bottom" />
                </InputFormat>
                <OutputFormat>
                    <Header xml:space="preserve" />
                    <Footer xml:space="preserve" />
                    <Seperator xml:space="preserve" layout="bottom" />
                </OutputFormat>
                <TestCase difficulty="sample">
                    <TestInput xml:space="preserve">Sun
</TestInput>
                    <TestOutput xml:space="preserve">Sunday
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">Mon
</TestInput>
                    <TestOutput xml:space="preserve">Monday
</TestOutput>
                </TestCase>
                <TestCase difficulty="special">
                    <TestInput xml:space="preserve">Tue
</TestInput>
                    <TestOutput xml:space="preserve">Tuesday
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">Wed
</TestInput>
                    <TestOutput xml:space="preserve">Wednesday
</TestOutput>
                </TestCase>
                <TestCase difficulty="special">
                    <TestInput xml:space="preserve">Thu
</TestInput>
                    <TestOutput xml:space="preserve">Thursday
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">Fri
</TestInput>
                    <TestOutput xml:space="preserve">Friday
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">Sat
</TestInput>
                    <TestOutput xml:space="preserve">Saturday
</TestOutput>
                </TestCase>
            </TestData>
            <Solution xml:space="preserve" language="cpp" filename="333">#include&lt;iostream&gt;
#include&lt;cstring&gt;

using namespace std;

char s[1000];

int main()
{
	while(cin&gt;&gt;s)
	{
		if (!strcmp(s,"Sun")) cout&lt;&lt;"Sunday"&lt;&lt;endl;
		if (!strcmp(s,"Mon")) cout&lt;&lt;"Monday"&lt;&lt;endl;
		if (!strcmp(s,"Tue")) cout&lt;&lt;"Tuesday"&lt;&lt;endl;
		if (!strcmp(s,"Wed")) cout&lt;&lt;"Wednesday"&lt;&lt;endl;
		if (!strcmp(s,"Thu")) cout&lt;&lt;"Thursday"&lt;&lt;endl;
		if (!strcmp(s,"Fri")) cout&lt;&lt;"Friday"&lt;&lt;endl;
		if (!strcmp(s,"Sat")) cout&lt;&lt;"Saturday"&lt;&lt;endl;
	}
	return 0;
}</Solution>
        </ProblemArchive>
        <ProblemArchive version="1.0" checked="true">
            <Title>Problem 60 国际象棋棋盘问题</Title>
            <Author>孙辞海</Author>
            <Problem contentType="html">
                <Description xml:space="preserve">在8×8的国际象棋的棋盘上，第一格放一粒米，第二格放二粒米，第三格放四粒米，第四格放八粒米，以此类推，后一格放的米粒的数量是前一格的两倍。请编写一个程序，求出前n格共需要几粒米。</Description>
                <InputSpec xml:space="preserve">你的程序需要从标准输入设备（通常为键盘）中读入多组测试数据。所有数据前后没有多余的空行，两组数据之间也没有多余的空行。每组数据一行，输入一个正整数n (1≤n≤60)，在行首和行尾没有多余的空格。
</InputSpec>
                <OutputSpec xml:space="preserve">对每组测试数据，你的程序需要向标准输出设备（通常为启动该程序的文本终端，例如你在Windows中启动该程序所用的命令行终端）依次输出从标准输入设备中读入的每一组测试数据对应的结果。所有数据前后没有多余的空行，两组数据之间也没有多余的空行。每组输出数据由一行组成，输出前n格共需要放多少粒米。</OutputSpec>
            </Problem>
            <TestData>
                <TimeLimit>1</TimeLimit>
                <InputFile />
                <OutputFile />
                <InputFormat inputType="eof">
                    <Terminator xml:space="preserve" />
                    <Seperator xml:space="preserve" layout="bottom" />
                </InputFormat>
                <OutputFormat>
                    <Header xml:space="preserve" />
                    <Footer xml:space="preserve" />
                    <Seperator xml:space="preserve" layout="bottom" />
                </OutputFormat>
                <TestCase difficulty="sample">
                    <TestInput xml:space="preserve">1
</TestInput>
                    <TestOutput xml:space="preserve">1
</TestOutput>
                </TestCase>
                <TestCase difficulty="sample">
                    <TestInput xml:space="preserve">3
</TestInput>
                    <TestOutput xml:space="preserve">7
</TestOutput>
                </TestCase>
                <TestCase difficulty="sample">
                    <TestInput xml:space="preserve">10
</TestInput>
                    <TestOutput xml:space="preserve">1023
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">60
</TestInput>
                    <TestOutput xml:space="preserve">1152921504606846975
</TestOutput>
                </TestCase>
                <TestCase difficulty="special">
                    <TestInput xml:space="preserve">20
</TestInput>
                    <TestOutput xml:space="preserve">1048575
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">30
</TestInput>
                    <TestOutput xml:space="preserve">1073741823
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">50
</TestInput>
                    <TestOutput xml:space="preserve">1125899906842623
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">2
</TestInput>
                    <TestOutput xml:space="preserve">3
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">4
</TestInput>
                    <TestOutput xml:space="preserve">15
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">11
</TestInput>
                    <TestOutput xml:space="preserve">2047
</TestOutput>
                </TestCase>
            </TestData>
            <Solution xml:space="preserve" language="cpp" filename="ff">#include&lt;iostream&gt;

using namespace std;

int main()
{
	unsigned long long t,res;
	while(cin&gt;&gt;t){
		res=1;
		res=(res&lt;&lt;t)-1;
		cout&lt;&lt;res&lt;&lt;endl;
	}
	return 0;
}
</Solution>
        </ProblemArchive>
    </ProblemList>
</PaperSetter>

