<?xml version="1.0" encoding="gb2312"?>
<PaperSetter checked="true">
    <PaperDetail xml:space="preserve"><PaperVersion>1</PaperVersion><PaperID>1</PaperID><PaperName>1</PaperName><PaperAuthor>1</PaperAuthor><PaperTotalTime unit="hour">3</PaperTotalTime><PaperStartTime zone="+8">1</PaperStartTime><PaperProblemSum>4</PaperProblemSum><PublicKey>MIHxMIGoBgcqhkjOOAQBMIGcAkEA/KaCzo4Syrom78z3EQ5SbbB4sF7ey80etKII864WF64B81uRpH5t9jQTxeEu0ImbzRMqzVDZkVG9xD7nN1kuFwIVAJYu3cw2nLqOuyYO5rahJtk0bjjFAkBnhHGyepz0TukaScUUfbGpqvJE8FpDTWSGkx0tFCcbnjUDC3H9c9oXkGmzLik1Yw4cIGI1TQ2iCmxBblC+eUykA0QAAkEA8ojKBedYrFoDBvrk2cvh998qmKFuHB0gXegkDXzHhk+yUprBGbpdLHVDWq8P7hPLyNPuviEvJoxz4x5kqiidgQ==</PublicKey><Signature>MCwCFGnbaidX4V0vbEQCJH81xR+G16/fAhQk1H9mzzR8bu8VvaqBpI2I+pO20A==</Signature><PaperReference><![CDATA[1]]></PaperReference><PaperDescribe><![CDATA[登陆及提交说明<BR>
请不要擅自操作键盘和鼠标，根据现场工作的人员的指示操作。<BR>
<BR>
<BR>
2)试题描述说明<BR>
试题主要是描述了一个问题，并请你用程序来解决这个问题。一般来说，你所编写的程序应该能够接受题目中所描述的数据，按照题目的描述处理这些数据，并且严格按照输出描述(The Output)中所述的格式输出结果。程序将提交到服务器进行打分。打分详情可见‘3)打分说明’部分。<BR>
试题主要分为六部分: <BR>
1.标题<BR>
包括试题的主标题，以及副标题Time Limit部分，Time Limit表示所提交的答题程序所能运行的最长时间，如果超过这个时间，程序无论输出是否正确，都将被裁判端判为Time Limit Exceed。<BR>
比如Time Limit是10 sec(10秒)。如果提交的答题程序运行时间超过10秒，则会被判为Time Limit Exceed，无论答题程序输出是否正确，也就是说在10秒内答题程序输出的结果正确或错误都不会得到任何提示。<BR>
<BR>
2.Descripiton<BR>
题目描述，作为题目的主要部分，对问题进行详细的说明。<BR>
<BR>
3.The Input<BR>
输入描述部分，这部分描述了输入数据及其格式和范围。输入答题程序的数据将严格按照这部分的描述。<BR>
<BR>
4.The Output<BR>
输出描述，这部分描述了答题程序所应该输出的数据及其格式。答题程序必须按照这部分的描述来输出，否则很有可能无法通过裁判端的测试。<BR>
<BR>
5.Sample Input<BR>
输入样例，以实例来说明输入数据的格式。请注意这里的数据只是作为实例，并不代表实际测试答题程序的数据是这些。因此能正确处理Sample中的数据并不代表程序一定能通过。不过，Sample数据一定是实际测试数据的子集，因此不能正确处理Sample就一定无法在裁判端通过。所以没有通过Sample的程序最好不要贸然提交。
<BR>
6.Sample Output<BR>
对应输入样例的输出数据，用来说明答题程序所应输出的格式。答题程序的输出应该严格按照这部分所示输出。比如：<BR>
在Sample Output中有两个整数独占一行，并且以空格分隔，如下：<BR>
2 3<BR>
那么如下的输出都是错误的：<BR>
a=2 b=3<BR>
或<BR>
2       3<BR>
或<BR>
3 2<BR>
必须严格按照Sample Output中所示的格式输出才有可能通过裁判端打分。<BR>
<BR>
3)打分说明<BR>
打分结果	评判标准<BR>
Compile Error	编译错<BR>
Time Limited Exceeded	程序运行超过时间限制<BR>
Run Time Error	程序运行错误<BR>
Wrong Answer	输出结果中关键数据错误<BR>
Presentation Error	格式错<BR>
Accepted	输出结果完全正确<BR>


4)程序编写说明<BR>
1.C/C++<BR>
首先，必须注意程序的main函数需要定义成int型，然后必须return 0。<BR>
其次，如果输入描述(The Output)中没有明确规定输入结束标志或说以EOF结束，那么可以使用如下格式来读入：<BR>
<BR>
while(cin>>a)或while(scanf("%d",&a)==1)<BR>
<BR>
注：这里while(scanf("%d",&a)==1)中的1是输入数据的数量，如果有两个则是：<BR>
while(scanf("%d %d",&a,&b)==2)<BR>
<BR>]]></PaperDescribe></PaperDetail>
    <ProblemList encrypted="0">
        <ProblemArchive version="1.0" checked="true">
            <Title>Problem 49 奖学金</Title>
            <Author>ZhuKai</Author>
            <Problem contentType="html">
                <Description xml:space="preserve">明明所在学校的惯例是在每学期的期末考试之后发放奖学金。发放的奖学金共有五种，获取的条件各不相同：&lt;BR&gt;
1. 院士奖学金：每人8000元，期末平均成绩高于80分，并且在本学期内发表1篇或1篇以上论文的学生均可获得。&lt;BR&gt;
2. 五四奖学金：每人4000元，期末平均成绩高于85分，并且班级评议成绩高于80分的学生均可获得。&lt;BR&gt;
3. 成绩优秀奖：每人2000元，期末平均成绩高于90分的学生均可获得。&lt;BR&gt;
4. 西部奖学金：每人1000元，期末平均成绩高于85分的西部省份学生均可获得。&lt;BR&gt;
5. 班级贡献奖：每人850元，班级评议成绩高于80分的学生干部均可获得。&lt;BR&gt;
	只要符合条件就可以得奖。 每项奖学金的获奖人数没有限制，每名学生也可以同时获得多项奖学金。 &lt;BR&gt;&lt;BR&gt;

	例如明明的期末平均成绩是87分，班级评议成绩82分，同时他还是一位学生干部，那么他可以同时获得五四奖学金和班级贡献奖，奖金总数是4850元。&lt;BR&gt;&lt;BR&gt;

	由于老师在学期末的时候很忙，所以，他把奖学金统计的事情交给明明做。老师把考试的相关数据给了明明，让他统计出以下数据：&lt;BR&gt;
1）	哪位同学获得的奖学金最多；&lt;BR&gt;
2）	获得最多奖学金的同学一共获得了多少奖学金；&lt;BR&gt;
3）	所有获得奖学金的同学一共获得了多少奖学金；&lt;BR&gt;&lt;BR&gt;

	明明虽然很愿意帮老师这个忙，但是他发现，同学的数量很多，统计起来很麻烦，经常有统计出错的情况发生。于是明明就想请你帮一个忙，帮他写一个统计程序，统计出以上三项内容。
</Description>
                <InputSpec xml:space="preserve">你写的程序要求从标准输入设备中读入测试数据作为你所写程序的输入数据。标准输入设备中有多组测试数据，每组测试数据有多行，每组测试数据的第一行有一个整数N（1≤N≤100），表示学生的总数。接下来的N行，每行是一位学生的数据，一行中从左向右依次是姓名，期末平均成绩，班级评议成绩，是否是学生干部，是否是西部省份学生，以及发表的论文数。姓名是由大小写英文字母组成的长度不超过20的字符串（不含空格），期末平均成绩和班级评议成绩都是0到100之间的整数（包括0和100），是否是学生干部和是否是西部省份学生分别用一个字符表示，Y表示是，N表示不是，发表的论文数是0到10的整数（包括0和10），每两个相邻数据项之间用一个空格分隔。每组测试数据与其后一组测试数据之间没有任何空行，第一组测试数据前面以及最后一组测试数据后面也都没有任何空行。 </InputSpec>
                <OutputSpec xml:space="preserve">对于每一组测试数据，你写的程序要求计算出一组相应的运算结果，并将每组运算结果作为你所写程序的输出数据依次写入到标准输出设备中。每组运算结果有三行，第一行是获得最多奖金的学生的姓名，第二行是这名学生获得的奖金总数。 如果有不止一名学生获得的奖学金最多，输出他们之中在输入文件里出现最早的学生姓名，第三行是这N个学生获得的奖学金的总数。输出时，每组运算结果其行首和行尾都没有任何空格或其他任何字符，每组运算结果与其后一组运算结果之间有一个空行，最后一组运算结果后面没有空行。
&lt;BR&gt;&lt;BR&gt;
    注：通常，显示屏为标准输出设备。
</OutputSpec>
            </Problem>
            <TestData>
                <TimeLimit>10</TimeLimit>
                <InputFile />
                <OutputFile />
                <InputFormat inputType="eof">
                    <Terminator xml:space="preserve" />
                    <Seperator xml:space="preserve" layout="bottom" />
                </InputFormat>
                <OutputFormat>
                    <Header xml:space="preserve" />
                    <Footer xml:space="preserve" />
                    <Seperator xml:space="preserve" layout="middle">
</Seperator>
                </OutputFormat>
                <TestCase difficulty="sample">
                    <TestInput xml:space="preserve">1
Peter 87 82 Y N 0
</TestInput>
                    <TestOutput xml:space="preserve">Peter
4850
4850
</TestOutput>
                </TestCase>
                <TestCase difficulty="sample">
                    <TestInput xml:space="preserve">2
Peter 85 85 Y Y 1
Mary 90 90 N N 0
</TestInput>
                    <TestOutput xml:space="preserve">Peter
8850
12850
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">42
QHMAlldF 83 80 Y N 8
GBkNDXfFzsTjRP 33 39 Y Y 0
Vs 24 71 N N 9
Yqe 99 29 N Y 6
zIKAVseZY 78 2 Y Y 8
GPFdOexBOJvVBYPElpn 81 79 Y Y 1
PAYHqqqmujOVOuwMNbC 51 32 Y Y 10
axkLJhiJwKuNxz 72 21 N Y 1
Q 0 77 N Y 9
hKAgqcDuEoWYzVCPalV 48 16 Y N 4
vZltkcWrEJh 19 79 N N 8
cFLitDvhclVyWBsm 42 29 Y Y 0
CmXHMNEfXTggPY 45 99 N Y 8
Kps 90 1 Y N 8
GkDze 51 98 Y N 10
IpsdJZ 41 32 Y N 4
bQKMZBWbDuFKRr 80 13 N N 2
yJEHsQo 14 52 N Y 9
oEdPzNVMTtdQOMvpPUc 45 92 N Y 1
EtLgPNDbPETJPR 60 12 Y Y 8
oyjbADDpjxHoPWYhq 59 82 Y Y 2
VNqrjXOvI 77 59 Y N 9
skUVjrMzOkieRAD 92 34 Y Y 9
HxqJJWxms 92 21 Y N 10
ZdtZTjnXgsSZNCvafm 52 21 Y N 9
bZU 56 43 Y Y 6
mMH 66 87 Y N 1
BrBFBEhUiwbtebcXfxf 30 73 N N 2
CCtGumRBzShReWjxHuY 36 96 N N 3
QriIfDuEOQuhe 92 81 Y N 0
UzSUDBRStRC 92 7 N Y 0
VdeTi 99 71 N Y 3
eczbKdqIFB 63 85 Y Y 8
dGJllaACRS 20 98 Y Y 9
CLFeJThCAbexxgeYhGcR 87 15 Y Y 4
CoROPFhoqLfWKfDYm 23 44 N Y 10
oSDJHWBxmUFQa 3 38 N N 2
NyQQyW 35 45 Y Y 6
ckkKdiCy 39 13 Y N 9
SEygvdPAVFRrskT 75 42 Y N 7
IbzZjMYpaAWEJchrv 10 68 N N 9
OTPnpYgIOq 19 4 N Y 7
</TestInput>
                    <TestOutput xml:space="preserve">Yqe
11000
90100
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">65
MTGPpnJuaYNKNVl 53 73 N Y 1
AgmKid 41 63 N Y 9
QIPO 82 37 N Y 8
uWVJ 35 51 Y Y 1
DHJf 79 2 N N 10
RyfnHScyTAD 15 36 Y Y 7
NGIXcwgSEE 13 84 Y Y 5
jAIjwynRiOWiYTdAWHG 32 61 N Y 3
nljGu 32 55 Y Y 8
gFkStjAFZAlRhCD 65 12 Y Y 8
V 95 67 N N 5
vRYuqRDKbFuRQLBWXZA 45 65 N N 8
mgNpNKm 4 10 N Y 2
Fc 68 93 Y Y 1
lAlToOoxQjGnn 36 92 N N 4
AdWdzFSw 21 31 N Y 3
nHsCNUndfmZ 56 51 Y Y 7
kAyZxTb 66 88 Y N 2
pG 64 45 N Y 6
XbcyCQhdZrbMrxo 1 93 Y Y 0
ngRcmNJGwSFiusoLS 72 29 Y N 3
HLofBsnCZRPHnzcQgINq 34 58 Y Y 7
xbknElJT 20 26 Y Y 9
w 61 78 Y N 1
kltDpSDgf 25 63 N N 1
oiSqCS 69 57 Y N 10
voWfwgiaVoqoISq 76 18 N Y 10
dutnXrxwLG 56 23 Y N 10
yNLaoSkfah 34 29 N N 5
aitWlvxo 70 43 Y Y 6
YJoHmvgfddTbUfvcSSz 43 25 N Y 10
vGBpC 38 60 Y Y 3
BthYkIuHTUD 75 80 N N 8
faqklZTjAeFuKlJQdFpl 47 76 Y N 10
DkfjSWxijeRXzapM 32 77 Y N 6
UtqaYGldjmTdLDRETt 54 66 Y N 7
kXNVztuWovJPVnKJ 29 59 N Y 2
KUvq 75 77 Y N 4
bbR 16 98 N Y 8
WVTTqMcaZRnxUF 76 25 Y N 2
QSTJ 43 24 N N 6
OrjYAKrYrUjnqnKp 46 23 N N 5
aEvqZvZuaPgpPZZv 65 35 N Y 7
sp 80 61 Y Y 1
vXTORXeA 30 23 Y Y 1
HZIYbRGp 19 78 Y N 10
yulVBukmzrNVdn 35 75 N Y 9
FssQVVBwFRTkebOea 69 79 N N 8
tixlQsTwADaYLpXBx 100 96 Y N 4
YtCYFpsyggmiTtno 61 19 Y Y 5
WTgGpPXaOZBdVHFM 78 47 N Y 3
QvmopfsZpjeRkj 76 25 N N 6
lKyogToRjpEWxPW 68 20 N Y 9
EDfQCqSiIEiLiGFSTK 38 26 N Y 10
kCwekjP 50 13 Y N 9
BGvinywsaWuPnAxdZhAZ 72 76 Y N 0
lUl 51 50 N Y 10
gMiWDdzkBd 56 34 N N 7
sVZMsjKeTheHQJ 31 16 N N 3
DLSLjpx 21 91 N Y 10
YcaQe 68 62 Y N 2
fnEbcpyLBtlle 32 16 N N 8
Tu 43 41 Y N 1
tqbbOoKNYrAM 79 53 Y Y 3
SySXBOWVrclQviVYKozm 67 79 Y N 10
</TestInput>
                    <TestOutput xml:space="preserve">tixlQsTwADaYLpXBx
14850
36250
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">10
DvmhiSPqjDywYTLYsk 14 30 N Y 0
vrLvekIayjEvBCI 23 64 Y N 1
bibNwrLRzOpQWAfE 4 91 Y Y 0
AUmhKnMYmtZNtsWhFj 69 62 Y N 7
qZhKrvEYpfpHu 25 24 Y N 1
tkOKmiyrXxzeBek 57 4 N N 10
aLyP 47 16 Y Y 5
eawKvOd 82 34 N Y 6
cTzVwoA 76 69 N Y 0
uKzHUkNvclkpmfCq 18 99 Y Y 6
</TestInput>
                    <TestOutput xml:space="preserve">eawKvOd
8000
9700
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">4
fvEK 83 66 N Y 10
JuEVzItrscpgLxAGy 51 35 N N 0
DAhkXt 81 49 Y Y 2
ZMyoFcqifZUffGosgU 31 74 N Y 3
</TestInput>
                    <TestOutput xml:space="preserve">fvEK
8000
16000
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">39
siaRsswBMRmc 55 29 N N 7
JmNytsVzSqnOUjJwS 26 21 N N 3
CzOLjrtSId 26 21 Y N 0
GsSHjRL 23 23 Y Y 7
fWkTjXuF 72 21 Y N 2
nqJHmoWehEvTZold 49 36 Y Y 3
YPJzvGwKwzb 34 47 Y Y 3
OfGWEzu 21 86 N Y 4
qHr 47 33 Y Y 9
xSFHYykujJVqTDpsXbI 66 93 N N 3
uWcizcTeLGFhOOsW 95 43 Y N 3
Q 51 51 Y N 10
ORHDlUW 10 29 Y Y 6
WXLUkSp 20 56 N Y 10
CZaqvWgoJdxpqsZHgRO 26 77 N Y 9
fl 80 3 N N 9
zhfWWxgPlagmBybChSOH 77 45 N Y 8
ZX 38 62 N N 3
GG 80 59 Y N 1
xh 17 66 N Y 5
tQTeo 22 44 Y N 3
TFLkr 71 78 N N 0
QPiaQTSKALIsX 85 87 Y Y 0
rAZdXXmdltXkxen 65 62 Y Y 8
cQwbS 26 26 N Y 9
SXIAHK 52 93 Y Y 4
pKlmatuIbbMEyhtX 71 77 Y Y 10
HhYVYcTZ 6 6 Y N 5
rbdDdEIZOUzqiWuOrQ 78 11 Y Y 5
PDIPnOCVpgg 89 36 N N 9
WQTIUVA 10 42 N Y 10
x 16 53 N N 6
ggFIbuOu 74 74 Y N 5
hSwtwNjcxjbCekEG 66 22 N Y 6
KDhkUBVCPsOdluRYsqZ 31 63 N N 0
QtGIQSwcnTrbtyyVhKx 15 59 Y Y 8
PSOkFCCvjfjCddwnOrgR 17 2 N Y 4
PzlJVc 17 76 Y Y 7
PnfoqoMhWw 66 1 Y Y 4
</TestInput>
                    <TestOutput xml:space="preserve">uWcizcTeLGFhOOsW
10000
19700
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">75
ZFfTQEJEbSwEwKouSGc 33 96 Y N 8
UIoHBkLwKTAXSFUisLot 72 10 N N 1
vyEJIWtEIu 47 77 N N 2
NIDIk 62 63 N Y 6
QVTrflwaBaCFJlIMFX 68 34 Y Y 6
WZP 53 15 N Y 7
mnmhxepYBOqnH 9 100 N Y 2
QInyQUzEVzWbSwkjN 86 84 N N 7
xc 5 63 Y N 3
QWmFSgGoPPtB 57 84 N N 6
KWsdQryczMeAw 43 37 N N 6
uBiPWqXGVkLVS 21 71 N Y 0
QdtcET 38 49 Y N 7
soPFhRTSllxy 48 52 N N 3
GmBzBFzoQSTRK 41 23 N Y 8
nLJw 15 5 N Y 2
zKmTVxFXpyjohudTAZt 4 73 Y N 4
mQcbGkq 44 90 N N 3
npQSbHyCAt 1 32 Y Y 6
cwwrlffVxUJ 10 54 N Y 3
j 61 84 Y Y 4
rLThNtiNWNDwUBQI 61 49 Y Y 0
DMKuMXOKYCF 73 10 Y N 7
iGiZYxyWohTgSwTQe 42 69 Y Y 0
YnQzZlISMahnniT 55 6 N Y 3
IGuxrjzeUWv 62 50 Y N 3
ARd 47 13 Y N 8
kzAINtZXLKlCqTNqnT 47 93 Y N 0
axModIWaIg 79 39 N Y 1
vpu 73 55 N N 1
TDRUQdev 64 29 N N 0
mpNQI 32 3 N Y 6
cDpZHvIioNLOR 97 94 Y N 6
wImsaDAnH 26 83 N N 7
Keuxihu 8 56 N Y 8
wDdGQabluOmnPUH 8 85 Y Y 3
eltIBUrmvoVX 62 47 Y N 6
ScltoUKaK 57 63 N N 7
fPDyOQWVthHgZFUNpN 18 59 N N 10
aalRqku 86 17 Y Y 10
swOCLTqSTjCn 33 78 Y Y 9
DAHjRggIkDdrrJTwsGw 96 68 N Y 7
MSPtVp 69 83 Y Y 10
FHenxrho 75 82 N N 0
kDXTKWuzLllidEun 46 12 Y N 0
vGtepIixRv 43 29 N N 3
KgOhHDDvtHeKhfWpPE 75 66 Y N 0
ivHFWfjYeDGt 65 69 N N 0
y 52 51 Y Y 3
JcGMhmTmsiHZZYCgMBY 46 83 Y N 4
QtLiyZ 11 25 Y Y 1
HKLHNhvZpX 46 6 N N 4
pPbxKo 68 89 N N 2
CFUvCeeqjWkktZfj 36 63 Y N 10
yNkIsLhUFW 86 74 Y Y 5
bYvlbR 69 64 N N 4
tJNMZgKEKuDyk 48 71 N Y 1
LCnOludrLnkZceKzgL 97 35 N Y 2
ClJscJkPuVXlIAmoJ 24 39 Y N 1
rfY 22 5 Y Y 2
iAfZGm 53 30 N N 4
TOfcK 20 93 Y N 10
AQuYwZFHpfymIdXJDX 87 67 N N 4
jbInODNMi 56 24 Y N 10
oPkQ 51 20 N N 8
pzdFSbISZnXfyFpWMID 8 54 Y Y 2
nJtPYXINbYS 4 79 Y Y 1
LzmOPYfKWPpJApaioU 99 77 Y Y 1
PV 100 72 Y N 8
wHbok 12 62 Y Y 1
huRL 37 73 Y N 6
NpGxgl 56 28 Y Y 9
MLcTCZtIFZm 96 81 N N 4
sIrxIGSoPchoYZW 95 44 N N 4
VbyoMagZyAVnVCK 42 20 Y N 6
</TestInput>
                    <TestOutput xml:space="preserve">cDpZHvIioNLOR
14850
125800
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">53
KpWphTyVaEFXGEJK 36 22 N N 4
AOSIIpnDbTaEZiP 14 25 Y Y 5
unq 51 32 N Y 2
FLekR 25 26 Y N 4
w 10 51 Y N 6
JUBiRcTrzjcJZMZ 17 38 Y Y 7
fVRrwOO 83 62 N Y 6
wwNAQlwgiin 40 2 N Y 7
oBfwpHfhahUhiddPkgiL 42 15 Y N 10
gVXyuCJfLqhTguDUgRto 56 84 Y Y 6
HJGmpQVgmBVLqu 71 56 N Y 5
VlozXonLYUKDuT 49 34 N Y 5
KTxl 80 12 N N 0
IJXralDvepWhPkDGvqi 42 36 N N 0
y 70 23 Y N 0
EQmFvnGXSdNwQD 99 16 Y N 6
uizPHGBueRbXJffkbKp 98 15 N N 5
AoRo 4 67 Y N 8
TrjuPTgZIUNLrfKMduv 46 13 Y Y 6
nEFUhA 59 41 N Y 10
zTBd 17 99 Y Y 8
jt 10 97 N Y 7
H 98 55 N N 0
SxftQiiyzX 83 4 N N 5
aCNhSjuLOBgSfxWL 9 68 Y N 3
fvyrKGqvhEOMr 40 8 N N 8
SQzenTbneF 51 87 N Y 3
MWWknMmCPOaFugbR 7 59 N Y 5
TYHSIWoFRBAauJXiMGfI 86 1 Y N 6
TYqhwHug 39 48 N N 6
SetR 56 53 Y Y 1
fbJFVVaDH 93 56 Y Y 4
FCzgChl 66 41 N N 3
qnHgA 38 93 Y Y 9
PNLxqIbnjqoKKlcuMB 51 68 Y Y 7
ALNq 59 32 N Y 2
uqnjxK 52 46 N Y 10
qAPHgsTkROYHukcYgeOF 71 64 Y N 2
uoIJw 8 78 Y Y 8
OvwrP 17 99 Y N 6
fvvW 65 72 Y Y 7
OaSVRPzEo 3 21 Y Y 0
mjwSRGtHLdzZXdkHH 6 33 Y N 7
REcKkuL 49 10 Y Y 4
MvNcGRGDdl 83 21 Y Y 1
ZQzNVTCTHoiEyY 40 87 N N 9
EvyplzeoM 18 63 N Y 0
VAJQgA 40 74 N N 7
HopuTMkdNX 15 32 N N 7
IlcTTpMqSyK 64 38 Y Y 7
DApVZmxqDIel 39 39 N N 10
uNDsgmhABqfdSkBTN 45 19 Y Y 3
EbGDFEQnEKMPChbm 71 33 N Y 5
</TestInput>
                    <TestOutput xml:space="preserve">fbJFVVaDH
11000
68400
</TestOutput>
                </TestCase>
                <TestCase difficulty="special">
                    <TestInput xml:space="preserve">100
YELsVMwXsOHLvijwlpjY 100 100 Y Y 10
cAewYfHFbtwpdyWDljRE 100 100 Y Y 10
wDsyCfaZoGXwtQjMdOjy 100 100 Y Y 10
eHfWhkNygPMvJnguWQlZ 100 100 Y Y 10
soSRcByAGbvxoPAhRHVg 100 100 Y Y 10
dHpNSqjqeyWzOOAedMaC 100 100 Y Y 10
zQIWKkgCvShsoRXXPcqj 100 100 Y Y 10
knIpKeClkflZkmnCVHzz 100 100 Y Y 10
bJrutFixOFEyiVZQRMLS 100 100 Y Y 10
xNrOwVPihyFVOkwcXgSh 100 100 Y Y 10
AQepHYPjguhBfjyklnmW 100 100 Y Y 10
yHSzygFNfdLhEhNyCMSg 100 100 Y Y 10
wVEJZHyldoNChTSZMQYI 100 100 Y Y 10
dwXAAMifjRYXWErrBRZx 100 100 Y Y 10
KQejCWtftqlHhoMRUWOl 100 100 Y Y 10
ZCFcfxJoeSjBmdDSyTao 100 100 Y Y 10
haYkUtRSxcnDUHWmxrkS 100 100 Y Y 10
DSVTFuZbWPRjsXwefzKR 100 100 Y Y 10
eSPpcWuERnAtYIyaWIzE 100 100 Y Y 10
cMieYAAOIdYRrdvKCAhC 100 100 Y Y 10
LJeantkRpTrkaYurhLeA 100 100 Y Y 10
taEPzNverszlYHRTMYOI 100 100 Y Y 10
rlbCXLYLvYXXpWqNAQav 100 100 Y Y 10
UknCkFTjCgivxNAwtfQn 100 100 Y Y 10
ayopdVqKuZzjWvtNzqQA 100 100 Y Y 10
aWcxXPNufgDJhGzEdFIo 100 100 Y Y 10
yRmoISciWbXekUDzLEKX 100 100 Y Y 10
GOvtRMQbnSbrbFLwFTjZ 100 100 Y Y 10
wGtbRPWbwNKvDccoQWrP 100 100 Y Y 10
KQqCLzqKXkqVEWkzyYDH 100 100 Y Y 10
OCHZHfAlwlxEtUBuSNIw 100 100 Y Y 10
NZJxoYSghJKjFnDiPFdq 100 100 Y Y 10
WIDwYKvuFnyCJJJnGsqf 100 100 Y Y 10
EoOmhzTfMSrDRnLKhYPZ 100 100 Y Y 10
vYtvPvTEayqUzSAxijEb 100 100 Y Y 10
CTVFrXknpbdwpLDwonXl 100 100 Y Y 10
VhJahvANonxLXhTfIKBx 100 100 Y Y 10
buvGIGcFrMRuAbQuBWGg 100 100 Y Y 10
ObxECqBZbQFqvlmzFBzl 100 100 Y Y 10
QkMVFyJeDSbIUmlctuoF 100 100 Y Y 10
OWBEdmkoHDCmgtViNAkS 100 100 Y Y 10
gQCsxactlkveaZStEelt 100 100 Y Y 10
kDOGlpSqCdscXRhwQnmi 100 100 Y Y 10
xdQnKxYxlypMjHYDTgjM 100 100 Y Y 10
mlCZCISFRHWIRHiuogqP 100 100 Y Y 10
UkqEoAqNDgvEfFeAbaQe 100 100 Y Y 10
kKcPDepJmpuztjykNUgo 100 100 Y Y 10
UWgfzDkeKDutvOoHgdDL 100 100 Y Y 10
JFbznJQoZbHrzGkMCwDj 100 100 Y Y 10
cvAClmTRJvStWQjMhYSx 100 100 Y Y 10
vJfGmLdLZCmhCXMYVxAV 100 100 Y Y 10
sWODLeaBfHrDJsodrnbS 100 100 Y Y 10
eDBXoTjRMVvSRonPuKcO 100 100 Y Y 10
nPVGnaOjieeLEtaVPOuc 100 100 Y Y 10
yIGTfQeccPjPASApSQHT 100 100 Y Y 10
uFbPLUamiZpoLDUEYIZh 100 100 Y Y 10
azrrZMyVbUJRWrJpnceR 100 100 Y Y 10
lGoUWoclobeasuVTMEHP 100 100 Y Y 10
IWnQeZItxWcEMjQzrUIn 100 100 Y Y 10
baqRejXHdXnmjljrWDOe 100 100 Y Y 10
cEqvlWmKxspdZhGVpFMH 100 100 Y Y 10
bgTRpeAxzPKdpJBCFmsq 100 100 Y Y 10
pMPfcCMdqQwoNqPhVZbL 100 100 Y Y 10
GjScWuwedStFBKunzGPV 100 100 Y Y 10
tejbhCGEvxWsbQPjljRC 100 100 Y Y 10
CXLtLhZsQOjXIMJghzbv 100 100 Y Y 10
UuluNRMauWgUsXgVRCfv 100 100 Y Y 10
AUuiOliLIzUSaKNEOILs 100 100 Y Y 10
eFIRFUBZYphmEEQjsHKV 100 100 Y Y 10
ZDLjVZrOcGaGQNyOQJzW 100 100 Y Y 10
DCFLQddyQiczSbWpoDRL 100 100 Y Y 10
bGgWurUFlaeRkkNReGlB 100 100 Y Y 10
IDCTbxKHKeLVxyqTJlQe 100 100 Y Y 10
tIUICDFeRnNZrhbmfYmD 100 100 Y Y 10
BlTgQwoTpcdWqosjglmB 100 100 Y Y 10
WOLjPsXETPmMlUWBBqoC 100 100 Y Y 10
ybudWYjvWizXHuVTjqYh 100 100 Y Y 10
tmFqFzFveLrKAovTZEXc 100 100 Y Y 10
SMgbaCeVWsfOdRixIftD 100 100 Y Y 10
TGkRdRCyXCEGDhPQIwbe 100 100 Y Y 10
zvPiCFzatFEFVndRhaGS 100 100 Y Y 10
gDRVVepFviYdTGDjVlMg 100 100 Y Y 10
rVuTnZStNskrzKXjWMnp 100 100 Y Y 10
XXughMbRUJapPMIxdiOx 100 100 Y Y 10
LQWwQaqMiPxiWEhFqQbj 100 100 Y Y 10
xKNBgiKKeQLyEOKVYbKT 100 100 Y Y 10
DfmWyNNHGtBuzmfscddB 100 100 Y Y 10
OtVketjZRhSbdLIuFmOt 100 100 Y Y 10
VxcSHtckIcKOVFOvrYoF 100 100 Y Y 10
pFZiXXNpGwYFWGbDfCgP 100 100 Y Y 10
yqRUQyYvEBxfoFmMHCOD 100 100 Y Y 10
uExZsviWbsBEwgmRCfXm 100 100 Y Y 10
ueOxwmWcOZMoreqidtmO 100 100 Y Y 10
QdqxVIavOECccYWZBJes 100 100 Y Y 10
VQJLJcPpfCoIVVrIQstG 100 100 Y Y 10
teuUEjgsESRjSbjojJcq 100 100 Y Y 10
tZKTKtrYBEFkChxEGTId 100 100 Y Y 10
bxBmRbGOldyDcCCMzapo 100 100 Y Y 10
GhAJIPtTcoYMtczbBpIu 100 100 Y Y 10
ePAJSxWQjXHqQauQDFhj 100 100 Y Y 10
</TestInput>
                    <TestOutput xml:space="preserve">YELsVMwXsOHLvijwlpjY
15850
1585000
</TestOutput>
                </TestCase>
            </TestData>
            <Solution xml:space="preserve" language="cpp" filename="049.cpp">#include&lt;iostream&gt;

using namespace std;

int main() {
    int qimo[101], banji[101], lunwen[101];
    char xuegan[101], xibu[101], names[101][21], r_name[21];
    int n;
    int r=0;
    while (cin&gt;&gt;n) {
	if(r!=0) cout&lt;&lt;endl;
	r++;
        int sum = 0, max = -1;
        for(int i = 0; i &lt; n; i ++) {
            int temp = 0;
            cin &gt;&gt; names[i] &gt;&gt; qimo[i] &gt;&gt; banji[i] &gt;&gt; xuegan[i]
                &gt;&gt; xibu[i] &gt;&gt; lunwen[i];
            if(qimo[i] &gt;80 &amp;&amp; lunwen[i] &gt; 0) {
                temp += 8000;
            }
            if(qimo[i] &gt; 85 &amp;&amp; banji[i] &gt; 80) {
                temp += 4000;
            }
            if(qimo[i] &gt; 90) {
                temp += 2000;
            }
            if(qimo[i] &gt; 85 &amp;&amp; 'Y' == xibu[i]) {
                temp += 1000;
            }
            if(banji[i] &gt; 80 &amp;&amp; 'Y' == xuegan[i]) {
                temp += 850;
            }
            if(temp &gt; max) {
                max = temp;
                strcpy(r_name, names[i]);
            }
            sum += temp;
        }     
        cout &lt;&lt; r_name &lt;&lt; endl &lt;&lt; max &lt;&lt; endl &lt;&lt; sum &lt;&lt; endl;
    }
    return 0;
}
</Solution>
        </ProblemArchive>
        <ProblemArchive version="1.0" checked="true">
            <Title>Problem 50 序列</Title>
            <Author>ZhuKai</Author>
            <Problem contentType="html">
                <Description xml:space="preserve">明明的爸爸经常用做游戏的方法启发明明对数学的兴趣。有一次，明明爸爸准备了许多盒子和球，他要和明明做一个放球的游戏。游戏如下：要将k个小球依次装入到若干个盒子中去（可以使用的盒子数不限）。小球装入盒子的规则如下：&lt;BR&gt;
1）第一个盒子不能为空。&lt;BR&gt;
2）依次装入各个盒子的球数必须严格递增。例如：当k=8时，装入方法有1，2，5或1，3，4。&lt;BR&gt;
3）装入的盒子数尽可能多。&lt;BR&gt;
4）所有相邻盒子的球数之差的绝对值之和最小。如上例中：装入法1，2，5，则差的绝对值之和为(2-1)+(5-2)=4。装入法1，3，4，则差的绝对值之和为(3-1)+(4-3)=3。因此应该采用后一种装法。&lt;BR&gt;&lt;BR&gt;

	明明明白了规则以后，就兴致盎然地玩起了游戏。起先明明玩得很有劲，每次都能顺利的找出最佳的装小球的方法。但是随着小球数量的增多，装小球的方法也就变得越来越多，明明就需要花更多的时间才能找到最佳的装球方法，这使得明明有些犯难了。于是明明想到了你，他想请你帮他写一个程序，他把小球的数量告诉你，而你的程序用来计算装小球的方法。&lt;BR&gt;&lt;BR&gt;

	明明的问题可以归结为：告诉你小球的数量k，然后通过程序计算出盒子装小球的最佳方法。
</Description>
                <InputSpec xml:space="preserve">你写的程序要求从标准输入设备中读入测试数据作为你所写程序的输入数据。标准输入设备中有多组测试数据，每组测试数据仅占一行，每行有一个整数k（1 ≤k ≤10000），即小球的个数。当k=0时，表示输入结束。每组测试数据与其后一组测试数据之间没有任何空行，第一组测试数据前面以及最后一组测试数据后面也都没有任何空行。</InputSpec>
                <OutputSpec xml:space="preserve">对于每一组测试数据，你写的程序要求计算出一组相应的运算结果，并将每组运算结果作为你所写程序的输出数据依次写入到标准输出设备中。每组运算结果为一串整数，即表示依次放入各个盒子里的小球的个数，每两个数字之间用一个‘,’分隔。每组运算结果单独占一行，其行首和行尾都没有任何空格或其他任何字符，每组运算结果与其后一组运算结果之间没有任何空行或其他任何字符，第一组运算结果前面以及最后一组运算结果后面也都没有任何空行或其他任何字符。&lt;BR&gt;&lt;BR&gt;

注：通常，显示屏为标准输出设备。
</OutputSpec>
            </Problem>
            <TestData>
                <TimeLimit>10</TimeLimit>
                <InputFile />
                <OutputFile />
                <InputFormat inputType="zero">
                    <Terminator xml:space="preserve">0</Terminator>
                    <Seperator xml:space="preserve" layout="bottom" />
                </InputFormat>
                <OutputFormat>
                    <Header xml:space="preserve" />
                    <Footer xml:space="preserve" />
                    <Seperator xml:space="preserve" layout="bottom" />
                </OutputFormat>
                <TestCase difficulty="sample">
                    <TestInput xml:space="preserve">1
</TestInput>
                    <TestOutput xml:space="preserve">1
</TestOutput>
                </TestCase>
                <TestCase difficulty="sample">
                    <TestInput xml:space="preserve">8
</TestInput>
                    <TestOutput xml:space="preserve">1,3,4
</TestOutput>
                </TestCase>
                <TestCase difficulty="sample">
                    <TestInput xml:space="preserve">100
</TestInput>
                    <TestOutput xml:space="preserve">1,2,3,4,6,7,8,9,10,11,12,13,14
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">2
</TestInput>
                    <TestOutput xml:space="preserve">2
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">3
</TestInput>
                    <TestOutput xml:space="preserve">1,2
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">999
</TestInput>
                    <TestOutput xml:space="preserve">1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,37,38,39,40,41,42,43,44,45
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">1000
</TestInput>
                    <TestOutput xml:space="preserve">1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,45
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">9998
</TestInput>
                    <TestOutput xml:space="preserve">1,2,3,4,5,6,7,8,9,10,11,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">9999
</TestInput>
                    <TestOutput xml:space="preserve">1,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141
</TestOutput>
                </TestCase>
                <TestCase difficulty="special">
                    <TestInput xml:space="preserve">10000
</TestInput>
                    <TestOutput xml:space="preserve">1,2,3,4,5,6,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141
</TestOutput>
                </TestCase>
            </TestData>
            <Solution xml:space="preserve" language="cpp" filename="050.cpp">#include &lt;iostream&gt;

using namespace std;

int main() {
    int ballCnt;
    int box[10000];
    while (cin &gt;&gt; ballCnt) {
        if(ballCnt==0) break;
        int remain = ballCnt, i = 0, lastBox = 0;
        while (remain &gt; lastBox) {
            box[i] = i + 1;
            remain -= i + 1;
            lastBox = box[i];
            i++;
        }
        int boxCnt = i;
        while (remain &gt; 0) {
            i--;
            box[i]++;
            remain--;
        }
        for (i = 0; i &lt; boxCnt; i++) {
            cout &lt;&lt; box[i];
            if (i &lt; boxCnt - 1) {
                cout &lt;&lt; ",";
            }
            else {
                cout &lt;&lt; endl;
            }
        }
    }
    return 0;
}
</Solution>
        </ProblemArchive>
        <ProblemArchive version="1.0" checked="true">
            <Title>Problem 51 树</Title>
            <Author>ZhuKai</Author>
            <Problem contentType="html">
                <Description xml:space="preserve">明明是一家地铁建设公司的职员，他负责地铁线路的规划和设计。一次，明明要在一条长L的马路上建造若干个地铁车站。这条马路有一个特点，马路上种了一排树，每两棵相邻的树之间的间隔都是一米。如果把马路看成一个数轴，马路的一端在数轴0的位置，马路的另一端在L的位置，那么这些树都种在数轴的整数点上，即0，1，2，…，L上都种有一棵树。由于要设计建造地铁站的缘故，所以需要把一些树移走，明明为了移树的方便，把地铁站的区域也建在了数轴上两个整数点之间，由于有多条地铁线路，地铁车站的区域可能会有部分的重合（重合的区域明明将来会设计成一个大型的车站，移树的时候不必考虑地铁站重合区域的问题）。现在明明想请你帮一个忙，他把车站区域的位置告诉你，即告诉你数轴上的两个整数点，在这两个整数点之间是车站的区域，请你写一个程序，计算出把所有车站区域两点之间的树移走以后，这条马路上还剩多少棵树。&lt;BR&gt;&lt;BR&gt;

	例如：马路长为10，要建造2个地铁车站，车站的区域分别是2到5和3到6，原先的马路上一共有11棵树，在2到5的位置上建车站后，需要移走4棵树，在3到6的位置上建车站后，也需要移走4棵树，但是3到6这个区域和2到5这个区域有部分重合，所以只需移走1棵树即可，这样总共移走的树是5棵，剩下的树就是6棵。&lt;BR&gt;&lt;BR&gt;

	明明的问题可以归结为：给你一条马路的长度和若干个车站的位置，请你用程序计算出把树移走后，马路上还剩多少棵树。
</Description>
                <InputSpec xml:space="preserve">你写的程序要求从标准输入设备中读入测试数据作为你所写程序的输入数据。标准输入设备中有多组测试数据，每组测试数据有多行，每组测试数据的第一行有两个整数L（1≤L≤10000）和M（0≤M≤100），分别表示马路的长度和地铁车站区域的个数。接下来有M行，每行有2个整数，分别表示每一座地铁车站区域的两个坐标的。每组测试数据与其后一组测试数据之间没有任何空行，第一组测试数据前面以及最后一组测试数据后面也都没有任何空行。</InputSpec>
                <OutputSpec xml:space="preserve">对于每一组测试数据，你写的程序要求计算出一组相应的运算结果，并将每组运算结果作为你所写程序的输出数据依次写入到标准输出设备中。每组运算结果为一个整数，即把树移走后，马路上还剩下多少棵树。每组运算结果单独占一行，其行首和行尾都没有任何空格或其他任何字符，每组运算结果与其后一组运算结果之间没有任何空行或其他任何字符，第一组运算结果前面以及最后一组运算结果后面也都没有任何空行或其他任何字符。&lt;BR&gt;&lt;BR&gt;

注：通常，显示屏为标准输出设备。 
</OutputSpec>
            </Problem>
            <TestData>
                <TimeLimit>10</TimeLimit>
                <InputFile />
                <OutputFile />
                <InputFormat inputType="eof">
                    <Terminator xml:space="preserve" />
                    <Seperator xml:space="preserve" layout="bottom" />
                </InputFormat>
                <OutputFormat>
                    <Header xml:space="preserve" />
                    <Footer xml:space="preserve" />
                    <Seperator xml:space="preserve" layout="bottom" />
                </OutputFormat>
                <TestCase difficulty="sample">
                    <TestInput xml:space="preserve">5 1
1 2
</TestInput>
                    <TestOutput xml:space="preserve">4
</TestOutput>
                </TestCase>
                <TestCase difficulty="sample">
                    <TestInput xml:space="preserve">10 2
2 5
3 6
</TestInput>
                    <TestOutput xml:space="preserve">6
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">42 85
12 13
29 34
32 40
1 40
23 29
14 18
18 28
28 31
11 18
12 27
24 32
34 41
6 11
24 29
11 29
14 22
3 20
26 39
4 7
22 32
18 18
0 20
5 14
2 31
5 38
25 34
2 42
23 37
4 9
18 25
2 36
6 30
10 41
0 30
12 26
21 23
32 42
12 42
12 22
21 24
2 4
8 15
21 23
35 42
2 17
14 30
33 38
18 36
10 29
17 26
31 38
0 40
2 27
25 26
21 33
6 23
24 35
7 31
0 23
3 35
2 17
38 42
5 8
12 32
2 32
9 42
33 34
5 18
28 33
20 32
18 20
8 24
2 40
12 12
6 15
1 29
14 30
40 40
14 21
38 38
18 26
5 33
32 42
12 33
5 14
</TestInput>
                    <TestOutput xml:space="preserve">0
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">9375 11
4596 5269
4447 8596
916 5732
4734 8281
53 1999
7666 9186
3788 6900
467 8751
3728 5517
3731 5896
2421 8431
</TestInput>
                    <TestOutput xml:space="preserve">242
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">4311 52
890 1253
1373 3304
203 1687
937 3352
1372 3583
119 1238
1912 2384
1532 2425
2053 2518
3195 3237
1407 3093
339 1587
879 3442
3136 3640
522 2306
2548 3332
1862 2345
2341 3550
1285 2137
2062 3224
1290 3668
1726 2619
942 3785
1879 3646
1328 2567
1908 2887
2634 3266
2712 2807
1086 3080
490 574
1627 2561
2894 3997
1416 2284
321 1814
1403 1698
1387 1397
2604 3557
2020 2829
763 2088
2510 2600
997 3755
613 1752
465 1165
2319 3487
690 1961
1661 2622
1216 1242
2197 2745
748 1208
2154 4169
4161 4253
1145 2728
</TestInput>
                    <TestOutput xml:space="preserve">177
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">2369 8
95 1075
1064 2329
32 331
1470 1705
388 1383
573 1919
2059 2296
97 679
</TestInput>
                    <TestOutput xml:space="preserve">72
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">2550 65
194 2009
193 236
8 746
225 799
976 1529
224 2251
257 1497
263 704
684 2059
1396 1762
573 2196
604 912
537 1832
1762 2246
260 1701
687 2472
481 1593
237 2365
2027 2161
42 433
262 969
1251 1840
782 929
1947 2167
644 1449
241 2194
431 660
1923 2512
1263 2168
930 2252
101 2289
1074 2549
967 1863
314 1661
364 1273
1413 2302
9 1629
236 2385
524 2416
1658 2467
117 1763
1230 1886
551 827
1152 2525
1548 2251
74 2466
1543 1924
819 1911
306 1426
391 1922
2083 2199
276 2317
142 839
674 1916
247 309
707 1330
362 2005
1109 1515
221 235
250 1854
1039 2116
2183 2346
140 939
144 1216
2125 2509
</TestInput>
                    <TestOutput xml:space="preserve">9
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">6577 80
2924 6568
2732 4215
2859 4678
4117 5750
1018 2152
1385 3418
2800 4931
1926 4748
2432 4757
581 5858
2998 3915
3024 5465
586 5109
1304 3930
3253 3487
1318 3265
2625 5893
5616 5629
2208 5689
324 1806
123 4862
105 3737
3617 6213
1264 1682
1538 6202
592 5030
2699 4459
5813 6411
1419 1786
1768 3478
2029 3876
1117 4940
673 5506
4557 4588
4422 5802
1787 6429
1200 4899
6324 6439
2303 6182
2324 6201
5108 6477
1379 1731
67 3116
1304 2694
1072 6415
6249 6540
2392 4799
6044 6257
3038 6072
1329 5667
822 3482
1626 2779
201 1948
3025 3537
3049 4135
6318 6444
3305 3534
5540 6139
4307 5007
4395 4689
4495 4565
2354 6559
2562 3543
3806 5475
3422 3584
76 3816
1213 1723
2798 2963
2483 2607
911 5057
3114 3489
4675 6360
2223 2408
4020 6511
441 3007
1725 4669
3221 4714
1626 5622
2049 5471
4116 4242
</TestInput>
                    <TestOutput xml:space="preserve">76
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">2280 77
788 1329
1443 1637
994 1993
614 1052
119 1424
300 2195
674 727
1607 2045
57 1737
239 1224
744 2176
195 1752
924 1268
189 916
875 1824
610 1413
1017 1246
740 1042
1021 1764
1397 1792
842 1313
308 1249
899 1459
1066 1105
403 1649
1515 2134
335 1916
762 2068
173 776
1131 1548
79 965
1435 1920
1582 2184
470 1974
1905 2169
1038 1587
441 1802
72 1515
1840 1967
1182 1370
733 1039
582 2073
389 1337
655 1803
538 951
1812 2160
1037 1725
503 670
692 2134
82 1144
1642 2167
117 2273
451 759
384 776
748 2142
108 2165
114 750
413 1539
17 303
569 2123
2179 2243
690 1897
103 1951
1016 1340
430 1579
1576 1769
299 1676
917 2258
292 584
417 435
498 946
477 951
603 1662
2061 2277
110 1198
248 1136
737 1246
</TestInput>
                    <TestOutput xml:space="preserve">20
</TestOutput>
                </TestCase>
                <TestCase difficulty="special">
                    <TestInput xml:space="preserve">10000 100
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
0 10000
</TestInput>
                    <TestOutput xml:space="preserve">0
</TestOutput>
                </TestCase>
            </TestData>
            <Solution xml:space="preserve" language="cpp" filename="051.cpp">#include &lt;iostream&gt;
#include &lt;cstring&gt;

using namespace std;

int main() {
    int L, M;
    bool road[20000];
    while ( cin &gt;&gt; L &gt;&gt; M ) {
        memset(road, 1, L + 1);
        int cnt = L + 1;
        for (int i = 0; i &lt; M; i++) {
            int left, right;
            cin &gt;&gt; left &gt;&gt; right;
            for (int j = left; j &lt;= right; j++) {
                if (road[j]) {
                    cnt--;
                    road[j] = false;
                }
            }
        }
        cout &lt;&lt; cnt &lt;&lt; endl;
    }
    return 0;
}
</Solution>
        </ProblemArchive>
        <ProblemArchive version="1.0" checked="true">
            <Title>Problem 52 三角形</Title>
            <Author>ZhuKai</Author>
            <Problem contentType="html">
                <Description xml:space="preserve">“明明，你会用1到9这九个数字组成一个三角形吗？”明明的爸爸问明明。明明被问的很莫名其妙，不明白他爸爸在说什么，于是就问道：“用1到9组成三角形？？？”“是的，我的要求很简单，给你2个数，一个数作为这个三角形的开始，另一个数决定这个三角形的大小。例如我给你5和6这两个数，你就要组成如下的一个三角形：&lt;BR&gt;&lt;BR&gt;

5&lt;BR&gt;
6 7&lt;BR&gt;
8 9 1&lt;BR&gt;
2 3 4 5&lt;BR&gt;
6 7 8 9 1&lt;BR&gt;
2 3 4 5 6 7&lt;BR&gt;&lt;BR&gt;

明白了吗？”&lt;BR&gt;
	明明观察了许久，终于看出了门道来，说道：“就是说给我2个数，例如5和6，那我就要从5这个数开始构建一个三角形。第一行为一个数字，第二行为2个数字，以此类推，直到第六行的六个数字，且三角形中的数字都是1到9在循环重复，是这样吗？”“明明真聪明，就是这样。”明明爸爸高兴的说道。于是明明的爸爸给了明明很多组这样的数字，明明也构建出了很多个不同的三角形。&lt;BR&gt;&lt;BR&gt;

	你能像明明那样，写一个程序来构建上面的三角形吗？
</Description>
                <InputSpec xml:space="preserve">你写的程序要求从标准输入设备中读入测试数据作为你所写程序的输入数据。标准输入设备中有多组测试数据，每组测试数据仅有一行，每行有两个整数s和n（1≤s≤9，1≤n≤100），其中s表示位于三角形的最顶端的数字，n表示三角形由几行数字组成。每组测试数据与其后一组测试数据之间没有任何空行，第一组测试数据前面以及最后一组测试数据后面也都没有任何空行。</InputSpec>
                <OutputSpec xml:space="preserve">对于每一组测试数据，你写的程序要求计算出一组相应的运算结果，并将每组运算结果作为你所写程序的输出数据依次写入到标准输出设备中。每组运算结果为构建出来的三角形，三角形中的同一行的数字两两之间用一个空格隔开。每组运算结果与其后一组运算结果之间有一个空行，最后一组运算结果后面没有空行。&lt;BR&gt;&lt;BR&gt;

注：通常，显示屏为标准输出设备。
</OutputSpec>
            </Problem>
            <TestData>
                <TimeLimit>10</TimeLimit>
                <InputFile />
                <OutputFile />
                <InputFormat inputType="eof">
                    <Terminator xml:space="preserve" />
                    <Seperator xml:space="preserve" layout="bottom" />
                </InputFormat>
                <OutputFormat>
                    <Header xml:space="preserve" />
                    <Footer xml:space="preserve" />
                    <Seperator xml:space="preserve" layout="middle">
</Seperator>
                </OutputFormat>
                <TestCase difficulty="sample">
                    <TestInput xml:space="preserve">1 5
</TestInput>
                    <TestOutput xml:space="preserve">1
2 3
4 5 6
7 8 9 1
2 3 4 5 6
</TestOutput>
                </TestCase>
                <TestCase difficulty="sample">
                    <TestInput xml:space="preserve">5 6
</TestInput>
                    <TestOutput xml:space="preserve">5
6 7
8 9 1
2 3 4 5
6 7 8 9 1
2 3 4 5 6 7
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">1 2
</TestInput>
                    <TestOutput xml:space="preserve">1
2 3
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">2 3
</TestInput>
                    <TestOutput xml:space="preserve">2
3 4
5 6 7
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">3 4
</TestInput>
                    <TestOutput xml:space="preserve">3
4 5
6 7 8
9 1 2 3
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">5 50
</TestInput>
                    <TestOutput xml:space="preserve">5
6 7
8 9 1
2 3 4 5
6 7 8 9 1
2 3 4 5 6 7
8 9 1 2 3 4 5
6 7 8 9 1 2 3 4
5 6 7 8 9 1 2 3 4
5 6 7 8 9 1 2 3 4 5
6 7 8 9 1 2 3 4 5 6 7
8 9 1 2 3 4 5 6 7 8 9 1
2 3 4 5 6 7 8 9 1 2 3 4 5
6 7 8 9 1 2 3 4 5 6 7 8 9 1
2 3 4 5 6 7 8 9 1 2 3 4 5 6 7
8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5
6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4
5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4
5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5
6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7
8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1
2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5
6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1
2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7
8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5
6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4
5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4
5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5
6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7
8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1
2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5
6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1
2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7
8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5
6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4
5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4
5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5
6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7
8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1
2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5
6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1
2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7
8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5
6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4
5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4
5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5
6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7
8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1
2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5
6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">6 60
</TestInput>
                    <TestOutput xml:space="preserve">6
7 8
9 1 2
3 4 5 6
7 8 9 1 2
3 4 5 6 7 8
9 1 2 3 4 5 6
7 8 9 1 2 3 4 5
6 7 8 9 1 2 3 4 5
6 7 8 9 1 2 3 4 5 6
7 8 9 1 2 3 4 5 6 7 8
9 1 2 3 4 5 6 7 8 9 1 2
3 4 5 6 7 8 9 1 2 3 4 5 6
7 8 9 1 2 3 4 5 6 7 8 9 1 2
3 4 5 6 7 8 9 1 2 3 4 5 6 7 8
9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6
7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5
6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5
6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6
7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8
9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2
3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6
7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2
3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8
9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6
7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5
6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5
6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6
7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8
9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2
3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6
7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2
3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8
9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6
7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5
6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5
6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6
7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8
9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2
3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6
7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2
3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8
9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6
7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5
6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5
6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6
7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8
9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2
3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6
7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2
3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8
9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6
7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5
6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5
6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6
7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8
9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2
3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6
7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2
3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">7 70
</TestInput>
                    <TestOutput xml:space="preserve">7
8 9
1 2 3
4 5 6 7
8 9 1 2 3
4 5 6 7 8 9
1 2 3 4 5 6 7
8 9 1 2 3 4 5 6
7 8 9 1 2 3 4 5 6
7 8 9 1 2 3 4 5 6 7
8 9 1 2 3 4 5 6 7 8 9
1 2 3 4 5 6 7 8 9 1 2 3
4 5 6 7 8 9 1 2 3 4 5 6 7
8 9 1 2 3 4 5 6 7 8 9 1 2 3
4 5 6 7 8 9 1 2 3 4 5 6 7 8 9
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7
8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6
7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6
7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7
8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3
4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7
8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3
4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7
8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6
7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6
7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7
8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3
4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7
8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3
4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7
8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6
7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6
7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7
8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3
4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7
8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3
4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7
8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6
7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6
7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7
8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3
4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7
8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3
4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7
8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6
7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6
7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7
8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3
4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7
8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3
4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7
8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6
7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6
7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7
8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3
4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7
8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3
4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7
</TestOutput>
                </TestCase>
                <TestCase difficulty="special">
                    <TestInput xml:space="preserve">1 1
</TestInput>
                    <TestOutput xml:space="preserve">1
</TestOutput>
                </TestCase>
                <TestCase difficulty="special">
                    <TestInput xml:space="preserve">9 100
</TestInput>
                    <TestOutput xml:space="preserve">9
1 2
3 4 5
6 7 8 9
1 2 3 4 5
6 7 8 9 1 2
3 4 5 6 7 8 9
1 2 3 4 5 6 7 8
9 1 2 3 4 5 6 7 8
9 1 2 3 4 5 6 7 8 9
1 2 3 4 5 6 7 8 9 1 2
3 4 5 6 7 8 9 1 2 3 4 5
6 7 8 9 1 2 3 4 5 6 7 8 9
1 2 3 4 5 6 7 8 9 1 2 3 4 5
6 7 8 9 1 2 3 4 5 6 7 8 9 1 2
3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8
9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8
9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2
3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5
6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5
6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2
3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8
9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8
9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2
3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5
6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5
6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2
3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8
9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8
9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2
3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5
6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5
6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2
3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8
9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8
9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2
3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5
6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5
6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2
3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8
9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8
9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2
3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5
6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5
6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2
3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8
9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8
9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2
3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5
6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5
6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2
3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8
9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8
9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2
3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5
6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5
6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2
3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8
9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8
9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2
3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5
6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5
6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2
3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8
9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8
9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2
3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5
6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5
6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2
3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8
9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8
9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9
</TestOutput>
                </TestCase>
            </TestData>
            <Solution xml:space="preserve" language="cpp" filename="052.cpp">#include &lt;iostream&gt;

using namespace std;

int main() {
    int s, n;
    int r=0;
    while (cin &gt;&gt; s &gt;&gt; n) {
        if(r!=0) cout&lt;&lt;endl;
        r++;
        for (int i = 1; i &lt;= n; i++) {
            for (int j = 0; j &lt; i; j++) {
                cout &lt;&lt; s;
                if (j &lt; i - 1) {
                    cout &lt;&lt; ' ';
                }
                else {
                    cout &lt;&lt; endl;
                }
                s = s % 9 + 1;
            }
        }
    }
    return 0;
}
</Solution>
        </ProblemArchive>
    </ProblemList>
</PaperSetter>

