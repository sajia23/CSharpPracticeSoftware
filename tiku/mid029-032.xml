<?xml version="1.0" encoding="gb2312"?>
<PaperSetter checked="true">
    <PaperDetail xml:space="preserve"><PaperVersion>1</PaperVersion><PaperID>1</PaperID><PaperName>1</PaperName><PaperAuthor>1</PaperAuthor><PaperTotalTime unit="hour">3</PaperTotalTime><PaperStartTime zone="+8">1</PaperStartTime><PaperProblemSum>4</PaperProblemSum><PublicKey>MIHxMIGoBgcqhkjOOAQBMIGcAkEA/KaCzo4Syrom78z3EQ5SbbB4sF7ey80etKII864WF64B81uRpH5t9jQTxeEu0ImbzRMqzVDZkVG9xD7nN1kuFwIVAJYu3cw2nLqOuyYO5rahJtk0bjjFAkBnhHGyepz0TukaScUUfbGpqvJE8FpDTWSGkx0tFCcbnjUDC3H9c9oXkGmzLik1Yw4cIGI1TQ2iCmxBblC+eUykA0QAAkEA8ojKBedYrFoDBvrk2cvh998qmKFuHB0gXegkDXzHhk+yUprBGbpdLHVDWq8P7hPLyNPuviEvJoxz4x5kqiidgQ==</PublicKey><Signature>MCwCFHcziYLKfqJyhnACpxzoLrmdIfmKAhRivcbq4jRcwDwSX0KVO8vlwBroOg==</Signature><PaperReference><![CDATA[1]]></PaperReference><PaperDescribe><![CDATA[登陆及提交说明<BR>
请不要擅自操作键盘和鼠标，根据现场工作的人员的指示操作。<BR>
<BR>
<BR>
2)试题描述说明<BR>
试题主要是描述了一个问题，并请你用程序来解决这个问题。一般来说，你所编写的程序应该能够接受题目中所描述的数据，按照题目的描述处理这些数据，并且严格按照输出描述(The Output)中所述的格式输出结果。程序将提交到服务器进行打分。打分详情可见‘3)打分说明’部分。<BR>
试题主要分为六部分: <BR>
1.标题<BR>
包括试题的主标题，以及副标题Time Limit部分，Time Limit表示所提交的答题程序所能运行的最长时间，如果超过这个时间，程序无论输出是否正确，都将被裁判端判为Time Limit Exceed。<BR>
比如Time Limit是10 sec(10秒)。如果提交的答题程序运行时间超过10秒，则会被判为Time Limit Exceed，无论答题程序输出是否正确，也就是说在10秒内答题程序输出的结果正确或错误都不会得到任何提示。<BR>
<BR>
2.Descripiton<BR>
题目描述，作为题目的主要部分，对问题进行详细的说明。<BR>
<BR>
3.The Input<BR>
输入描述部分，这部分描述了输入数据及其格式和范围。输入答题程序的数据将严格按照这部分的描述。<BR>
<BR>
4.The Output<BR>
输出描述，这部分描述了答题程序所应该输出的数据及其格式。答题程序必须按照这部分的描述来输出，否则很有可能无法通过裁判端的测试。<BR>
<BR>
5.Sample Input<BR>
输入样例，以实例来说明输入数据的格式。请注意这里的数据只是作为实例，并不代表实际测试答题程序的数据是这些。因此能正确处理Sample中的数据并不代表程序一定能通过。不过，Sample数据一定是实际测试数据的子集，因此不能正确处理Sample就一定无法在裁判端通过。所以没有通过Sample的程序最好不要贸然提交。
<BR>
6.Sample Output<BR>
对应输入样例的输出数据，用来说明答题程序所应输出的格式。答题程序的输出应该严格按照这部分所示输出。比如：<BR>
在Sample Output中有两个整数独占一行，并且以空格分隔，如下：<BR>
2 3<BR>
那么如下的输出都是错误的：<BR>
a=2 b=3<BR>
或<BR>
2       3<BR>
或<BR>
3 2<BR>
必须严格按照Sample Output中所示的格式输出才有可能通过裁判端打分。<BR>
<BR>
3)打分说明<BR>
打分结果	评判标准<BR>
Compile Error	编译错<BR>
Time Limited Exceeded	程序运行超过时间限制<BR>
Run Time Error	程序运行错误<BR>
Wrong Answer	输出结果中关键数据错误<BR>
Presentation Error	格式错<BR>
Accepted	输出结果完全正确<BR>


4)程序编写说明<BR>
1.C/C++<BR>
首先，必须注意程序的main函数需要定义成int型，然后必须return 0。<BR>
其次，如果输入描述(The Output)中没有明确规定输入结束标志或说以EOF结束，那么可以使用如下格式来读入：<BR>
<BR>
while(cin>>a)或while(scanf("%d",&a)==1)<BR>
<BR>
注：这里while(scanf("%d",&a)==1)中的1是输入数据的数量，如果有两个则是：<BR>
while(scanf("%d %d",&a,&b)==2)<BR>
<BR>]]></PaperDescribe></PaperDetail>
    <ProblemList encrypted="0">
        <ProblemArchive version="1.0" checked="true">
            <Title>Problem 29 稀疏矩阵</Title>
            <Author>孙辞海</Author>
            <Problem contentType="html">
                <Description xml:space="preserve">今天明明学到了什么叫做矩阵，但他发现要将一个矩阵输入进电脑是一件很麻烦的事。特别是有些矩阵很大，且大部分元素都是0，我们称这类矩阵为稀疏矩阵。&lt;BR&gt;&lt;BR&gt;

于是，明明发明了一种简单的表示方法，只指出矩阵中非零元素来表示该矩阵。例如一个矩阵：&lt;BR&gt;
0 0 0 5&lt;BR&gt;
2 0 0 0&lt;BR&gt;
0 1 0 0&lt;BR&gt;
0 0 4 0&lt;BR&gt;
可以表示成：&lt;BR&gt;
1 4 5&lt;BR&gt;
2 1 2&lt;BR&gt;
3 2 1&lt;BR&gt;
4 3 4&lt;BR&gt;
&lt;BR&gt;
但明明又开始力不从心了，于是再一次想到了你...&lt;BR&gt;&lt;BR&gt;

明明的问题可以归结为：试编程将一个稀疏矩阵a转换成只存放非零元素的矩阵b，即找出每个不是0的元素，按从左到有从上到下的顺序，输出其所在的行和列以及它的值。
</Description>
                <InputSpec xml:space="preserve">你写的程序要求从标准输入设备中读入测试数据作为你所写程序的输入数据。每组数据的第一行包括两个整数，M和N，用空格隔开，表示矩阵大小为M * N（1 ≤ M, N ≤ 20），之后的M行每行有N个整数，也用空格隔开，整数的大小不会超出int型，且必有一个数非零。行首行尾没有空格，每组测试数据之间也没有多余空行。</InputSpec>
                <OutputSpec xml:space="preserve">对于每一组测试数据，你写的程序要求计算出一组相应的运算结果，并将这一组运算结果作为你所写程序的输出数据依次写入到标准输出设备中。对应每组输入数据，用明明的矩阵表示法输出该矩阵，即找出每个不是0的元素，按从左到有从上到下的顺序，输出其所在的行和列以及它的值。其行首和行尾都没有任何空格，每组运算结果与其后一组运算结果之间有一个空行，最后一组运算结果后面没有空行。&lt;BR&gt;&lt;BR&gt;
注：通常，显示屏为标准输出设备。
</OutputSpec>
                <Figure filename="11.JPG">
                    <Text />
                    <Image xml:space="preserve"></Image>
                </Figure>
            </Problem>
            <TestData>
                <TimeLimit>10</TimeLimit>
                <InputFile />
                <OutputFile />
                <InputFormat inputType="eof">
                    <Terminator xml:space="preserve" />
                    <Seperator xml:space="preserve" layout="bottom" />
                </InputFormat>
                <OutputFormat>
                    <Header xml:space="preserve" />
                    <Footer xml:space="preserve" />
                    <Seperator xml:space="preserve" layout="middle">
</Seperator>
                </OutputFormat>
                <TestCase difficulty="sample">
                    <TestInput xml:space="preserve">4 4
0 0 0 5
2 0 0 0
0 1 0 0
0 0 4 0
</TestInput>
                    <TestOutput xml:space="preserve">1 4 5
2 1 2
3 2 1
4 3 4
</TestOutput>
                </TestCase>
                <TestCase difficulty="sample">
                    <TestInput xml:space="preserve">2 1
1
1
</TestInput>
                    <TestOutput xml:space="preserve">1 1 1
2 1 1
</TestOutput>
                </TestCase>
                <TestCase difficulty="special">
                    <TestInput xml:space="preserve">3 2
0 0
0 0
0 -1
</TestInput>
                    <TestOutput xml:space="preserve">3 2 -1
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">10 5
0 0 0 0 0
0 0 0 0 0
0 1 0 0 0
0 0 0 0 0
0 0 0 0 1
0 0 0 0 0
0 1 0 0 0
0 0 0 0 0
0 0 0 0 0
0 0 0 0 0
</TestInput>
                    <TestOutput xml:space="preserve">3 2 1
5 5 1
7 2 1
</TestOutput>
                </TestCase>
                <TestCase difficulty="special">
                    <TestInput xml:space="preserve">20 10
9 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 7
</TestInput>
                    <TestOutput xml:space="preserve">1 1 9
20 10 7
</TestOutput>
                </TestCase>
                <TestCase difficulty="special">
                    <TestInput xml:space="preserve">1 1
1
</TestInput>
                    <TestOutput xml:space="preserve">1 1 1
</TestOutput>
                </TestCase>
            </TestData>
            <Solution xml:space="preserve" language="cpp" filename="029">#include &lt;iostream&gt;
using namespace std;
int main(){
	int map[21][21];
	int m,n;
	int r=0;
	while(cin&gt;&gt;m&gt;&gt;n){
		if(r!=0) cout&lt;&lt;endl;
		r++;
		for(int i=0;i&lt;m;i++){
			for(int j=0;j&lt;n;j++){
				cin&gt;&gt;map[i][j];
				if(map[i][j]!=0){
					cout&lt;&lt;i+1&lt;&lt;" "&lt;&lt;j+1&lt;&lt;" "&lt;&lt;map[i][j]&lt;&lt;endl;
				}
			}
		}
	}
	return 0;
}
</Solution>
        </ProblemArchive>
        <ProblemArchive version="1.0" checked="true">
            <Title>Problem 30 N的倍数</Title>
            <Author>张志寿</Author>
            <Problem contentType="html">
                <Description xml:space="preserve">明明的爸爸在研究一个复杂的数学问题，研究了很长时间都没有结果。明明看见后就问爸爸在研究什么。明明的爸爸回答说：“我在研究一个整数的倍数问题，想找到某个数的倍数……”明明还没有等他爸爸说完，就抢着说：“这不是很简单嘛，你把这个整数乘以1，乘以2，……，就能得到很多的倍数呀。”明明的爸爸当然知道这种方法，但是他接着说：“这样的方法找倍数当然容易，但是我找的倍数有一个特点，那个倍数只能由0或1组成，且应该尽量的小。例如一个自然数2，它符合要求的那个倍数就是10。”这下明明明白为什么爸爸研究了那么多时间都还没有研究出结果了，因为随着数字的增大，找到它的符合要求的倍数越来越难。明明想帮他爸爸解决这个问题，于是他来求助于你，能否帮他爸爸写一个程序，来求一个整数的倍数，倍数仅有0或1组成，且要尽可能小。&lt;BR&gt;&lt;BR&gt;

明明的问题可以归结为：任意给定一个自然数N，寻找一个M，要求M是N的倍数，且它的所有各位数字都是由0或1组成，并要求M尽可能小。
</Description>
                <InputSpec xml:space="preserve">你写的程序要求从标准输入设备中读入测试数据作为你所写程序的输入数据。标准输入设备中有多组测试数据，每组测试数据仅占一行，每行仅包括一个正整数N（1≤N≤100），代表要求倍数的那个整数。每组测试数据与其后一组测试数据之间没有任何空行，第一组测试数据前面以及最后一组测试数据后面也都没有任何空行。</InputSpec>
                <OutputSpec xml:space="preserve">对于每一组测试数据，你写的程序要求计算出一组相应的运算结果，并将这一组运算结果作为你所写程序的输出数据依次写入到标准输出设备中。每组运算结果为一个整数，即N的倍数M。每组运算结果单独形成一行数据，其行首和行尾都没有任何空格，每组运算结果与其后一组运算结果之间没有任何空行，第一组运算结果前面以及最后一组运算结果后面也都没有任何空行。&lt;BR&gt;&lt;BR&gt;
注：通常，显示屏为标准输出设备。
</OutputSpec>
            </Problem>
            <TestData>
                <TimeLimit>10</TimeLimit>
                <InputFile />
                <OutputFile />
                <InputFormat inputType="eof">
                    <Terminator xml:space="preserve" />
                    <Seperator xml:space="preserve" layout="bottom" />
                </InputFormat>
                <OutputFormat>
                    <Header xml:space="preserve" />
                    <Footer xml:space="preserve" />
                    <Seperator xml:space="preserve" layout="bottom" />
                </OutputFormat>
                <TestCase difficulty="sample">
                    <TestInput xml:space="preserve">1
</TestInput>
                    <TestOutput xml:space="preserve">1
</TestOutput>
                </TestCase>
                <TestCase difficulty="sample">
                    <TestInput xml:space="preserve">2
</TestInput>
                    <TestOutput xml:space="preserve">10
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">10
</TestInput>
                    <TestOutput xml:space="preserve">10
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">13
</TestInput>
                    <TestOutput xml:space="preserve">1001
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">24
</TestInput>
                    <TestOutput xml:space="preserve">111000
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">32
</TestInput>
                    <TestOutput xml:space="preserve">100000
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">47
</TestInput>
                    <TestOutput xml:space="preserve">10011
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">58
</TestInput>
                    <TestOutput xml:space="preserve">11011010
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">71
</TestInput>
                    <TestOutput xml:space="preserve">10011
</TestOutput>
                </TestCase>
                <TestCase difficulty="special">
                    <TestInput xml:space="preserve">85
</TestInput>
                    <TestOutput xml:space="preserve">111010
</TestOutput>
                </TestCase>
            </TestData>
            <Solution xml:space="preserve" language="cpp" filename="030">#include &lt;iostream&gt;   //
using namespace std;   //

bool check(int i)   //
{
     while(i&gt;0)   //
     {
          if(i%10==1 || i%10==0)   //
          {
              i/=10;   //
          }
          else
              return false;   //
     }
     return true;   //
}

int main()   //
{
    int n;   //
    int i;   //
    while(cin&gt;&gt;n)   //
    {
        for(i=1;;i++)   //
        {
            if(check(i*n))   //
            {
                cout&lt;&lt;i*n&lt;&lt;endl;   //
                break;   //
            }
        }
    }
    return 0;   //
}
</Solution>
        </ProblemArchive>
        <ProblemArchive version="1.0" checked="true">
            <Title>Problem 31 扑克牌</Title>
            <Author>ZhouMingLiang</Author>
            <Problem contentType="html">
                <Description xml:space="preserve">明明和他的三位同学在玩一种非常有趣的扑克牌游戏。在这个游戏中，一副牌的大小怪被除去，然后把剩下的52张牌随机发给4个人，这样每个人的手中就有13张牌。接下来的任务就是每个人把自己手中的牌按一定的顺序整理好。理牌的顺序如下：首先按牌的大小整理，牌的大小顺序为：A，K，Q，J，T(10)，9，…，2，如果牌的大小相等，则按如下的花色顺序整理：黑桃（S），红心（H），方块（D），草花（C）。&lt;BR&gt;&lt;BR&gt;

    例如有一个人手中拿到的牌如下：&lt;BR&gt;
ST CQ S8 D8 HQ D2 H3 HK H9 H2 HT SK CK&lt;BR&gt;
    经过整理后的牌的顺序会变为：&lt;BR&gt;
SK HK CK HQ CQ ST HT H9 S8 D8 H3 H2 D2&lt;BR&gt;
其中SK、HK、CK这三张牌的大小相同，都是K，于是根据花色的顺序整理，先是S，再是H，最后是C，所以顺序为SK、HK、CK。 &lt;BR&gt;&lt;BR&gt;

当每个人把自己手中的牌整理完后，他们就开始玩非常有趣的扑克游戏了。但是玩着玩着，他们发现了一个问题：理牌的时间太长，这使得他们玩牌的兴致被大大减弱了。于是他们来求助于你，能否帮他们写一个理牌程序，帮助他们理牌，这样他们就可以不必把大量的时间花在理牌上面，而尽情享受玩牌的乐趣了。&lt;BR&gt;&lt;BR&gt;

    明明的问题可以归结为：给你每人手中顺序打乱的13张牌，一共有4套，然后通过题目中描述的理牌顺序，理好这4套牌。 
</Description>
                <InputSpec xml:space="preserve">你写的程序要求从标准输入设备中读入测试数据作为你所写程序的输入数据。标准输入设备中有多组测试数据，测试数据的第一行有一个整数n，表示有几副牌需要整理，接着每副牌分四行输入，每行13张牌；每张牌用两个字母表示，首字母表示花色，尾字母表示点数，每张牌之间有一个空格。每副牌与每副牌之间没有任何空行，第一副牌前面以及最后一副牌后面也都没有任何空行。&lt;BR&gt;&lt;BR&gt;
注：通常，键盘为标准输入设备。
</InputSpec>
                <OutputSpec xml:space="preserve">对于每一副牌，你写的程序要求计算出一组相应的运算结果，并将每组运算结果作为你所写程序的输出数据依次写入到标准输出设备中。对于每组输入的牌，输出排序后的牌，分四行输出，输出样式与输入相同。每组运算结果与其后一组运算结果之间有一个空行，最后一组运算结果后面没有空行。&lt;BR&gt;&lt;BR&gt;
注：通常，显示屏为标准输出设备。 
</OutputSpec>
            </Problem>
            <TestData>
                <TimeLimit>10</TimeLimit>
                <InputFile />
                <OutputFile />
                <InputFormat inputType="num">
                    <Terminator xml:space="preserve" />
                    <Seperator xml:space="preserve" layout="bottom" />
                </InputFormat>
                <OutputFormat>
                    <Header xml:space="preserve" />
                    <Footer xml:space="preserve" />
                    <Seperator xml:space="preserve" layout="middle">
</Seperator>
                </OutputFormat>
                <TestCase difficulty="sample">
                    <TestInput xml:space="preserve">ST CQ S8 D8 HQ D2 H3 HK H9 H2 HT SK CK
D9 HJ H7 DJ S2 SQ DT C2 H4 H5 DA D4 D5
D6 S4 S9 S5 S7 SJ H8 D3 C8 S3 C4 S6 C9
SA C7 HA H6 DK CJ D7 CA C5 CT DQ C6 C3
</TestInput>
                    <TestOutput xml:space="preserve">SK HK CK HQ CQ ST HT H9 S8 D8 H3 H2 D2
DA SQ HJ DJ DT D9 H7 H5 D5 H4 D4 S2 C2
SJ S9 C9 H8 C8 S7 S6 D6 S5 S4 C4 S3 D3
SA HA CA DK DQ CJ CT D7 C7 H6 C6 C5 C3
</TestOutput>
                </TestCase>
                <TestCase difficulty="sample">
                    <TestInput xml:space="preserve">D6 S4 S9 S5 S7 SJ H8 D3 C8 S3 C4 S6 C9
D9 HJ H7 DJ S2 SQ DT C2 H4 H5 DA D4 D5
ST CQ S8 D8 HQ D2 H3 HK H9 H2 HT SK CK
SA C7 HA H6 DK CJ D7 CA C5 CT DQ C6 C3
</TestInput>
                    <TestOutput xml:space="preserve">SJ S9 C9 H8 C8 S7 S6 D6 S5 S4 C4 S3 D3
DA SQ HJ DJ DT D9 H7 H5 D5 H4 D4 S2 C2
SK HK CK HQ CQ ST HT H9 S8 D8 H3 H2 D2
SA HA CA DK DQ CJ CT D7 C7 H6 C6 C5 C3
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">ST CQ S8 D8 HQ D2 H3 HK H9 H2 HT SK CK
D9 HJ H7 DJ S2 SQ DT C2 H4 H5 DA D4 D5
D6 S4 S9 S5 S7 SJ H8 D3 C8 S3 C4 S6 C9
SA C7 HA H6 DK CJ D7 CA C5 CT DQ C6 C3
</TestInput>
                    <TestOutput xml:space="preserve">SK HK CK HQ CQ ST HT H9 S8 D8 H3 H2 D2
DA SQ HJ DJ DT D9 H7 H5 D5 H4 D4 S2 C2
SJ S9 C9 H8 C8 S7 S6 D6 S5 S4 C4 S3 D3
SA HA CA DK DQ CJ CT D7 C7 H6 C6 C5 C3
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">ST CQ S8 D8 HQ D2 H3 HK H9 H2 HT SK CK
D9 HJ H7 DJ S2 SQ DT C2 H4 H5 DA D4 D5
D6 S4 S9 S5 S7 SJ H8 D3 C8 S3 C4 S6 C9
SA C7 HA H6 DK CJ D7 CA C5 CT DQ C6 C3
</TestInput>
                    <TestOutput xml:space="preserve">SK HK CK HQ CQ ST HT H9 S8 D8 H3 H2 D2
DA SQ HJ DJ DT D9 H7 H5 D5 H4 D4 S2 C2
SJ S9 C9 H8 C8 S7 S6 D6 S5 S4 C4 S3 D3
SA HA CA DK DQ CJ CT D7 C7 H6 C6 C5 C3
</TestOutput>
                </TestCase>
                <TestCase difficulty="special">
                    <TestInput xml:space="preserve">ST CQ S8 D8 HQ D2 H3 HK H9 H2 HT SK CK
D9 HJ H7 DJ S2 SQ DT C2 H4 H5 DA D4 D5
D6 S4 S9 S5 S7 SJ H8 D3 C8 S3 C4 S6 C9
SA C7 HA H6 DK CJ D7 CA C5 CT DQ C6 C3
</TestInput>
                    <TestOutput xml:space="preserve">SK HK CK HQ CQ ST HT H9 S8 D8 H3 H2 D2
DA SQ HJ DJ DT D9 H7 H5 D5 H4 D4 S2 C2
SJ S9 C9 H8 C8 S7 S6 D6 S5 S4 C4 S3 D3
SA HA CA DK DQ CJ CT D7 C7 H6 C6 C5 C3
</TestOutput>
                </TestCase>
            </TestData>
            <Solution xml:space="preserve" language="cpp" filename="109.cpp">#include &lt;iostream&gt;
using namespace std;

typedef struct
{
    char hua;
    int num;
    int v;
}card;

card c[4][13],ct;

int main()
{
    int i,j,nn,n;
    char t;
    int r=0;
    cin&gt;&gt;nn;
    while(nn--)
    {
	if(r!=0) cout&lt;&lt;endl;
	r++;
        for(i=0;i&lt;4;i++)
        {
            for(j=0;j&lt;13;j++)
            {
                cin&gt;&gt;c[i][j].hua;
                switch(c[i][j].hua)
                {
                    case 'S':c[i][j].v=4;break;
                    case 'H':c[i][j].v=3;break;
                    case 'D':c[i][j].v=2;break;
                    case 'C':c[i][j].v=1;break;
                }
                cin&gt;&gt;t;
                if(t&gt;='2' &amp;&amp; t&lt;='9')
                    c[i][j].num=t-'0';
                else
                {
                    switch(t)
                    {
                        case 'A':c[i][j].num=14;break;
                        case 'K':c[i][j].num=13;break;
                        case 'Q':c[i][j].num=12;break;
                        case 'J':c[i][j].num=11;break;
                        case 'T':c[i][j].num=10;break;
                    }
                }
            }
        }
        for(n=0;n&lt;4;n++)
        {
            for(i=0;i&lt;13;i++)
            {
                for(j=0;j&lt;13-i-1;j++)
                {
                    if(c[n][j].num&lt;c[n][j+1].num)
                    {
                        ct = c[n][j];
                        c[n][j] = c[n][j+1];
                        c[n][j+1] = ct;
                    }
                    else if(c[n][j].num==c[n][j+1].num)
                    {
                        if(c[n][j].v&lt;c[n][j+1].v)
                        {
                            ct = c[n][j];
                            c[n][j] = c[n][j+1];
                            c[n][j+1] = ct;
                        }
                    }
                }
            }
        }
        for(i=0;i&lt;4;i++)
        {
            for(j=0;j&lt;12;j++)
            {
                cout&lt;&lt;c[i][j].hua;
                if(c[i][j].num&gt;=10)
                    switch(c[i][j].num)
                    {
                        case 14:cout&lt;&lt;"A";break;
                        case 13:cout&lt;&lt;"K";break;
                        case 12:cout&lt;&lt;"Q";break;
                        case 11:cout&lt;&lt;"J";break;
                        case 10:cout&lt;&lt;"T";break;
                    }
                else
                    cout&lt;&lt;c[i][j].num;
                cout&lt;&lt;" ";
            }
            cout&lt;&lt;c[i][j].hua;
            if(c[i][j].num&gt;=10)
            switch(c[i][j].num)
            {
                case 14:cout&lt;&lt;"A";break;
                case 13:cout&lt;&lt;"K";break;
                case 12:cout&lt;&lt;"Q";break;
                case 11:cout&lt;&lt;"J";break;
                case 10:cout&lt;&lt;"T";break;
            }
            else
                cout&lt;&lt;c[i][j].num&lt;&lt;endl;
        }
    }


    return 0;
}
</Solution>
        </ProblemArchive>
        <ProblemArchive version="1.0" checked="true">
            <Title>Problem 32 乒乓球</Title>
            <Author>ZhouMingLiang</Author>
            <Problem contentType="html">
                <Description xml:space="preserve">国际乒联现任主席沙拉拉自从上任以来就立志于推行一系列改革，以推动乒乓球运动在全球的普及。其中11分制改革引起了很大的争议，有一部分球员因为无法适应新规则只能选择退役。明明就是其中一位，他退役之后走上了乒乓球研究工作，意图弄明白11分制和21分制对选手的不同影响。在开展他的研究之前，明明首先需要对他多年比赛的统计数据进行一些分析，所以需要你的帮忙。&lt;BR&gt;&lt;BR&gt;

（注：11（21）分制，在一局比赛中，选手A先得到11（21）分且此时领先选手B 2分或2分以上时，则选手A赢得此局；若当双方打成10（20）平后，则先多得2分的一方为胜方，赢得此局。）&lt;BR&gt;&lt;BR&gt;

    明明通过以下方式进行分析，首先将比赛每个球的胜负列成一张表，然后分别计算在11分制和21分制下，双方的比赛结果（截至记录末尾）。一局比赛的开始比分为0比0。&lt;BR&gt;&lt;BR&gt;

    比如现在有这么一份记录，（其中W表示明明获得一分，L表示明明的对手获得一分）：&lt;BR&gt;
WWWWWWWWWWWWWWWWWWWWWWLW&lt;BR&gt;&lt;BR&gt;

    在11分制下，此时比赛的结果是明明第一局11比0获胜，第二局11比0获胜，正在进行第三局，当前比分1比1。&lt;BR&gt;
在21分制下，此时比赛结果是明明第一局21比0获胜，正在进行第二局，当前比分2比1。&lt;BR&gt;&lt;BR&gt;

    再如有这么一份记录，（其中W表示明明获得一分，L表示明明的对手获得一分）：&lt;BR&gt;
    WLWLWLWLWLWLWLWLWLWLWLWLWL&lt;BR&gt;&lt;BR&gt;

    在11分制下，此时比赛的结果是明明和对手打成13比13，这局比赛仍没有分出胜负，因为任何一方都没有领先其对手2分。&lt;BR&gt;
在21分制下，此时比赛的结果是明明和对手打成13比13，这局比赛仍在进行中。&lt;BR&gt;&lt;BR&gt;

    由于明明参加过多年的比赛，比赛的数据量相当庞大，如果仅仅使用手工统计，在短时间内统计出结果对于明明来说是相当困难的。因此明明求助于你，希望你能写一个程序，帮助他快速地统计出结果来。&lt;BR&gt;&lt;BR&gt;

    明明的问题可以归结为：给你一系列的比赛数据（WL形式），分别按照11分制和21分制的比赛规则进行统计，然后输出统计结果。
</Description>
                <InputSpec xml:space="preserve">你写的程序要求从标准输入设备中读入测试数据作为你所写程序的输入数据。标准输入设备中有多组测试数据，每行包括一串有W、L和E组成比赛结果，其中W表示明明得一分，L表示明明的对手得一分，E表示该组测试数据的结束，也就是说E后面的W、L应该忽略，无需处理。每行的长度不会超过30个字符。每组测试数据与其后一组测试数据之间没有任何空行，第一组测试数据前面以及最后一组测试数据后面也都没有任何空行。</InputSpec>
                <OutputSpec xml:space="preserve">对于每一组测试数据，你写的程序要求计算出一组相应的运算结果，并将每组运算结果作为你所写程序的输出数据依次写入到标准输出设备中。每组运算结果由两部分组成，其中第一部分是11分制下的结果，第二部分是21分制下的结果，两部分之间由一个空行分隔。每部分由若干行组成，每一行对应一局比赛的比分（按比赛信息输入顺序），每局的比分按如下形式表示：m:n，其中m表示明明的得分，n表示明明的对手的得分，m、n之间用一个冒号隔开。输出时，每组运算结果与其后一组运算结果之间有一个空行，第一组运算结果前面以及最后一组运算结果后面没有任何空行或其他任何字符。
&lt;BR&gt;&lt;BR&gt;
注：通常，显示屏为标准输出设备。 
</OutputSpec>
            </Problem>
            <TestData>
                <TimeLimit>10</TimeLimit>
                <InputFile />
                <OutputFile />
                <InputFormat inputType="eof">
                    <Terminator xml:space="preserve" />
                    <Seperator xml:space="preserve" layout="bottom" />
                </InputFormat>
                <OutputFormat>
                    <Header xml:space="preserve" />
                    <Footer xml:space="preserve" />
                    <Seperator xml:space="preserve" layout="bottom" />
                </OutputFormat>
                <TestCase difficulty="sample">
                    <TestInput xml:space="preserve">WWWWWWWWWWWWWWWWWWWW
WWLWE
</TestInput>
                    <TestOutput xml:space="preserve">11:0
11:0
1:1

21:0
2:1
</TestOutput>
                </TestCase>
                <TestCase difficulty="sample">
                    <TestInput xml:space="preserve">WWWWWWWWWWLLLLLLLLLLL
WWWWWWWWWLLLLLLLLLE
</TestInput>
                    <TestOutput xml:space="preserve">13:11
6:9

19:20
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">WWWWWWWWWWWWWWWWWWE
</TestInput>
                    <TestOutput xml:space="preserve">11:0
7:0

18:0
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">LLLLLLLLLLLLLLLLLE
</TestInput>
                    <TestOutput xml:space="preserve">0:11
0:6

0:17
</TestOutput>
                </TestCase>
                <TestCase difficulty="special">
                    <TestInput xml:space="preserve">WWWWWWWWWL
LLLLLLLLLLLL
WWWWWWWWWWWWWWWW
LLLLLLLLLL
WWWWWWWWWWW
WWWWWWW
WWWWWWWWWWWWWW
LLLLLLLLLLL
LLLLLLLLLL
LLLLLLLLLLLL
E
</TestInput>
                    <TestOutput xml:space="preserve">9:11
11:2
12:10
11:0
11:0
3:11
0:11
0:11

21:13
21:10
15:21
0:12
</TestOutput>
                </TestCase>
            </TestData>
            <Solution xml:space="preserve" language="cpp" filename="110.cpp">#include &lt;iostream&gt;
using namespace std;
#include &lt;string&gt;


int main()
{
    string str,ts;
    int len;
    int i;
    int w,l;
    while(cin&gt;&gt;ts)
    {
        str="";
        str += ts;
        len = ts.length();
        if(ts[len-1]!='E')
        {
            while(cin&gt;&gt;ts)
            {
                str += ts;
                len = ts.length();
                if(ts[len-1]=='E')
                    break;
            }
        }
        w=l=0;
        for(i=0;i&lt;str.length()-1;i++)
        {
            if(str[i]=='W')
                w++;
            else
                l++;
            if((w&gt;=11 &amp;&amp; w-l&gt;=2) || (l&gt;=11 &amp;&amp; l-w&gt;=2))
            {
                cout&lt;&lt;w&lt;&lt;":"&lt;&lt;l&lt;&lt;endl;
                w=l=0;
            }
        }
        if(w+l!=0)
            cout&lt;&lt;w&lt;&lt;":"&lt;&lt;l&lt;&lt;endl;
        cout&lt;&lt;endl;
        
        w=l=0;
        for(i=0;i&lt;str.length()-1;i++)
        {
            if(str[i]=='W')
                w++;
            else
                l++;
            if((w&gt;=21 &amp;&amp; w-l&gt;=2) || (l&gt;=21 &amp;&amp; l-w&gt;=2))
            {
                cout&lt;&lt;w&lt;&lt;":"&lt;&lt;l&lt;&lt;endl;
                w=l=0;
            }
        }
        if(w+l!=0)
            cout&lt;&lt;w&lt;&lt;":"&lt;&lt;l&lt;&lt;endl;
    }
    return 0;
}
</Solution>
        </ProblemArchive>
    </ProblemList>
</PaperSetter>

