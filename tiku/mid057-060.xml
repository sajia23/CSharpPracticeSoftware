<?xml version="1.0" encoding="gb2312"?>
<PaperSetter checked="true">
    <PaperDetail xml:space="preserve"><PaperVersion>1</PaperVersion><PaperID>1</PaperID><PaperName>1</PaperName><PaperAuthor>1</PaperAuthor><PaperTotalTime unit="hour">3</PaperTotalTime><PaperStartTime zone="+8">1</PaperStartTime><PaperProblemSum>4</PaperProblemSum><PublicKey>MIHxMIGoBgcqhkjOOAQBMIGcAkEA/KaCzo4Syrom78z3EQ5SbbB4sF7ey80etKII864WF64B81uRpH5t9jQTxeEu0ImbzRMqzVDZkVG9xD7nN1kuFwIVAJYu3cw2nLqOuyYO5rahJtk0bjjFAkBnhHGyepz0TukaScUUfbGpqvJE8FpDTWSGkx0tFCcbnjUDC3H9c9oXkGmzLik1Yw4cIGI1TQ2iCmxBblC+eUykA0QAAkEA8ojKBedYrFoDBvrk2cvh998qmKFuHB0gXegkDXzHhk+yUprBGbpdLHVDWq8P7hPLyNPuviEvJoxz4x5kqiidgQ==</PublicKey><Signature>MCwCFC6wDISNG3hNEZyD2Q4noFHhZQVxAhQrijOq4bQGDgPPuPifKVLd7xogXg==</Signature><PaperReference><![CDATA[1]]></PaperReference><PaperDescribe><![CDATA[登陆及提交说明<BR>
请不要擅自操作键盘和鼠标，根据现场工作的人员的指示操作。<BR>
<BR>
<BR>
2)试题描述说明<BR>
试题主要是描述了一个问题，并请你用程序来解决这个问题。一般来说，你所编写的程序应该能够接受题目中所描述的数据，按照题目的描述处理这些数据，并且严格按照输出描述(The Output)中所述的格式输出结果。程序将提交到服务器进行打分。打分详情可见‘3)打分说明’部分。<BR>
试题主要分为六部分: <BR>
1.标题<BR>
包括试题的主标题，以及副标题Time Limit部分，Time Limit表示所提交的答题程序所能运行的最长时间，如果超过这个时间，程序无论输出是否正确，都将被裁判端判为Time Limit Exceed。<BR>
比如Time Limit是10 sec(10秒)。如果提交的答题程序运行时间超过10秒，则会被判为Time Limit Exceed，无论答题程序输出是否正确，也就是说在10秒内答题程序输出的结果正确或错误都不会得到任何提示。<BR>
<BR>
2.Descripiton<BR>
题目描述，作为题目的主要部分，对问题进行详细的说明。<BR>
<BR>
3.The Input<BR>
输入描述部分，这部分描述了输入数据及其格式和范围。输入答题程序的数据将严格按照这部分的描述。<BR>
<BR>
4.The Output<BR>
输出描述，这部分描述了答题程序所应该输出的数据及其格式。答题程序必须按照这部分的描述来输出，否则很有可能无法通过裁判端的测试。<BR>
<BR>
5.Sample Input<BR>
输入样例，以实例来说明输入数据的格式。请注意这里的数据只是作为实例，并不代表实际测试答题程序的数据是这些。因此能正确处理Sample中的数据并不代表程序一定能通过。不过，Sample数据一定是实际测试数据的子集，因此不能正确处理Sample就一定无法在裁判端通过。所以没有通过Sample的程序最好不要贸然提交。
<BR>
6.Sample Output<BR>
对应输入样例的输出数据，用来说明答题程序所应输出的格式。答题程序的输出应该严格按照这部分所示输出。比如：<BR>
在Sample Output中有两个整数独占一行，并且以空格分隔，如下：<BR>
2 3<BR>
那么如下的输出都是错误的：<BR>
a=2 b=3<BR>
或<BR>
2       3<BR>
或<BR>
3 2<BR>
必须严格按照Sample Output中所示的格式输出才有可能通过裁判端打分。<BR>
<BR>
3)打分说明<BR>
打分结果	评判标准<BR>
Compile Error	编译错<BR>
Time Limited Exceeded	程序运行超过时间限制<BR>
Run Time Error	程序运行错误<BR>
Wrong Answer	输出结果中关键数据错误<BR>
Presentation Error	格式错<BR>
Accepted	输出结果完全正确<BR>


4)程序编写说明<BR>
1.C/C++<BR>
首先，必须注意程序的main函数需要定义成int型，然后必须return 0。<BR>
其次，如果输入描述(The Output)中没有明确规定输入结束标志或说以EOF结束，那么可以使用如下格式来读入：<BR>
<BR>
while(cin>>a)或while(scanf("%d",&a)==1)<BR>
<BR>
注：这里while(scanf("%d",&a)==1)中的1是输入数据的数量，如果有两个则是：<BR>
while(scanf("%d %d",&a,&b)==2)<BR>
<BR>]]></PaperDescribe></PaperDetail>
    <ProblemList encrypted="0">
        <ProblemArchive version="1.0" checked="true">
            <Title>Problem 57 最大值</Title>
            <Author>frankhuhu</Author>
            <Problem contentType="html">
                <Description xml:space="preserve">为了培养明明对数学的热爱，明明的爸爸经常想出一些简单有趣且富有数学思想的游戏给明明玩。有一次，明明的爸爸在纸上写了N个数字，有正整数、负整数和0。明明的爸爸给明明一个范围，他可以选大于等于L1个且小于等于L2个的数字（L1≤L2），且这些数字必须是连续的。但是要求明明选出的数的和最大，这样说明明可能不太明白，于是明明爸爸就举了一个简单的例子。&lt;BR&gt;&lt;BR&gt;

    例如有5个数字为“1”、“2”、“3”、“4”、“5”，明明可以选择大于等于1个且小于等于2个的数字，也就是说明明可以选择1个数字，或者连续的2个数字。通过观察数字串，最后我们会选2个数字，4和5，他们的和最大，为9。&lt;BR&gt;&lt;BR&gt;

    明明明白爸爸的意思后，就开始玩起游戏来。但是他发现，这个游戏看似简单，其实还是有相当的难度，因为数字越多，选择数字个数范围越大，则题目越难，到后面明明有些不想玩了。于是明明就求助于你，请你帮他写一个程序，来求出和的最大值。&lt;BR&gt;&lt;BR&gt;

    明明的问题可以归结为：有N个数字，从中选择出连续的M(L1≤M≤L2)个数，求出它们之和的最大值。
</Description>
                <InputSpec xml:space="preserve">你写的程序要求从标准输入设备中读入测试数据作为你所写程序的输入数据。标准输入设备中有多组测试数据，每组测试数据有两行，每组测试数据的第一行有三个整数N(0&amp;lt;N≤20)、L1、L2(0&amp;lt;L1≤L2≤N)，N表示数字串中有多少个整数，L1、L2表示可选数字个数的范围，每组测试数据的第二行有N个整数，整数大小的绝对值都小于等于100，整数之间用一个空格隔开。每组测试数据与其后一组测试数据之间没有任何空行，第一组测试数据前面以及最后一组测试数据后面也都没有任何空行。 </InputSpec>
                <OutputSpec xml:space="preserve">对于每一组测试数据，你写的程序要求计算出一组相应的运算结果，并将每组运算结果作为你所写程序的输出数据依次写入到标准输出设备中。每组运算结果为一个整数，即所求的最大值。每组运算结果单独形成一行数据，其行首和行尾都没有任何空格，每组运算结果与其后一组运算结果之间没有任何空行，第一组运算结果前面以及最后一组运算结果后面也都没有任何空行。&lt;BR&gt;&lt;BR&gt;

注：通常，显示屏为标准输出设备。 
</OutputSpec>
            </Problem>
            <TestData>
                <TimeLimit>10</TimeLimit>
                <InputFile />
                <OutputFile />
                <InputFormat inputType="eof">
                    <Terminator xml:space="preserve" />
                    <Seperator xml:space="preserve" layout="bottom" />
                </InputFormat>
                <OutputFormat>
                    <Header xml:space="preserve" />
                    <Footer xml:space="preserve" />
                    <Seperator xml:space="preserve" layout="bottom" />
                </OutputFormat>
                <TestCase difficulty="sample">
                    <TestInput xml:space="preserve">5 1 2
1 2 3 4 5
</TestInput>
                    <TestOutput xml:space="preserve">9
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">5 1 2
-1 -2 -3 -4 -5
</TestInput>
                    <TestOutput xml:space="preserve">-1
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">10 1 10
1 2 3 4 5 6 7 8 9 10
</TestInput>
                    <TestOutput xml:space="preserve">55
</TestOutput>
                </TestCase>
                <TestCase difficulty="special">
                    <TestInput xml:space="preserve">10 1 10
-1 3 5 -89 100 -101 0 9 -7 11
</TestInput>
                    <TestOutput xml:space="preserve">100
</TestOutput>
                </TestCase>
                <TestCase difficulty="sample">
                    <TestInput xml:space="preserve">4 1 2
-1 0 1 2
</TestInput>
                    <TestOutput xml:space="preserve">3
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve" />
                    <TestOutput xml:space="preserve" />
                </TestCase>
            </TestData>
            <Solution xml:space="preserve" language="cpp" filename="057">#include&lt;iostream.h&gt; //
int arr[1000];  //
int main(){   //
    int n,l1,l2;  //
    while(cin&gt;&gt;n&gt;&gt;l1&gt;&gt;l2){ //
        int i,j;   //
        for(i=0;i&lt;n;i++)  //
        cin&gt;&gt;arr[i];  //
        int mmax=-1*(1&lt;&lt;20); //
    	for(i=0;i&lt;n;i++)  //
    	{  
    	    int res=0;  //
    	    for(j=i;j&lt;n;j++){  //
    	    	res+=arr[j];  //
    	    	if(res&gt;mmax&amp;&amp;((j-i)+1)&gt;=l1&amp;&amp;((j-i)+1)&lt;=l2) //
    	    		mmax=res; //
    		}    
    	}
     	cout&lt;&lt;mmax&lt;&lt;endl;   //
    }    
    return 0;  //
}    
</Solution>
        </ProblemArchive>
        <ProblemArchive version="1.0" checked="true">
            <Title>Problem 58 7的倍数</Title>
            <Author>frankhuhu</Author>
            <Problem contentType="html">
                <Description xml:space="preserve">明明的爸爸常年和数字打交道，经常会统计一些奇奇怪怪的数字用以研究。最近明明的爸爸在统计和7有关的一些正整数，他要找出小于等于N的所有的7的倍数以及有任何一位为7的数。&lt;BR&gt;&lt;BR&gt;

    例如：N=20，符合条件的数有7 14 17。其中7是7的倍数也是含有7的数字，14是7的倍数，17是含有7的数字。&lt;BR&gt;&lt;BR&gt;

    明明的爸爸工作很辛苦，因为一旦这个N很大，他就需要花很多时间才能找出所有符合条件的数字。明明看见自己的爸爸如此辛苦的工作，他想到了你。你是一名程序设计专家，明明想请你写一个程序，通过程序来统计出所有符合上述条件的和7有关的数字。&lt;BR&gt;&lt;BR&gt;

    明明的问题可以归结为：给你一个正整数N，输出所有不大于N的7的倍数，以及包含数字7的数字。 
</Description>
                <InputSpec xml:space="preserve">你写的程序要求从标准输入设备中读入测试数据作为你所写程序的输入数据。标准输入设备中有多组测试数据，每组测试数据仅有一行，每行有一个整数N(0&amp;lt;N≤10000)，表示所求数字的范围。每组测试数据与其后一组测试数据之间没有任何空行，第一组测试数据前面以及最后一组测试数据后面也都没有任何空行。 </InputSpec>
                <OutputSpec xml:space="preserve">对于每一组测试数据，你写的程序要求计算出一组相应的运算结果，并将每组运算结果作为你所写程序的输出数据依次写入到标准输出设备中。每组运算结果为一系列符合条件的数，按从小到大顺序排列且每两个数之间用一个空格隔开，具体格式请参考输出样例。每组运算结果单独形成一行数据，其行首和行尾都没有任何空格，每组运算结果与其后一组运算结果之间没有任何空行，第一组运算结果前面以及最后一组运算结果后面也都没有任何空行。&lt;BR&gt;&lt;BR&gt;

注：通常，显示屏为标准输出设备。 
</OutputSpec>
            </Problem>
            <TestData>
                <TimeLimit>10</TimeLimit>
                <InputFile />
                <OutputFile />
                <InputFormat inputType="eof">
                    <Terminator xml:space="preserve" />
                    <Seperator xml:space="preserve" layout="bottom" />
                </InputFormat>
                <OutputFormat>
                    <Header xml:space="preserve" />
                    <Footer xml:space="preserve" />
                    <Seperator xml:space="preserve" layout="bottom" />
                </OutputFormat>
                <TestCase difficulty="sample">
                    <TestInput xml:space="preserve">10
</TestInput>
                    <TestOutput xml:space="preserve">7
</TestOutput>
                </TestCase>
                <TestCase difficulty="sample">
                    <TestInput xml:space="preserve">20
</TestInput>
                    <TestOutput xml:space="preserve">7 14 17
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">30
</TestInput>
                    <TestOutput xml:space="preserve">7 14 17 21 27 28
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">50
</TestInput>
                    <TestOutput xml:space="preserve">7 14 17 21 27 28 35 37 42 47 49
</TestOutput>
                </TestCase>
                <TestCase difficulty="special">
                    <TestInput xml:space="preserve">10000
</TestInput>
                    <TestOutput xml:space="preserve
</TestOutput>
                </TestCase>
            </TestData>
            <Solution xml:space="preserve" language="cpp" filename="058">#include&lt;iostream.h&gt;  //
bool is7(int n){ //
    if(n%7==0) //
    	return true; //
	while(n&gt;0){ //
	    if(n%10==7) //
	    	return true; //
 		n/=10; //
	}
 	return false;    //
}    
int main(){   //
    int n;   //
    while(cin&gt;&gt;n){ //
        int i;  //
        bool first=true;//
        for(i=1;i&lt;=n;i++){ //
            if(is7(i)){ //
                if(!first) //
            	cout&lt;&lt;' '&lt;&lt;i; //
            	else  //
            	{ 
            	    cout&lt;&lt;i; //
            	    first=false; //
            	}    
         	}   	
        }
        cout&lt;&lt;endl;    //
    }    
    return 0; //
}    
</Solution>
        </ProblemArchive>
        <ProblemArchive version="1.0" checked="true">
            <Title>Problem 59 素数</Title>
            <Author>frankhuhu</Author>
            <Problem contentType="html">
                <Description xml:space="preserve">明明的爸爸是一位数学家，明明受他爸爸的影响从小就喜欢数学，经常向他爸爸学习或请教数学问题。一天，明明问他爸爸什么是素数，明明的爸爸回答说：“首先，素数都是大于1的自然数；其次，素数是只能被1和其本身整除的数。例如‘3’这个数，它只能被1和3这两个整数整除，因此‘3’就是素数；但是‘4’就不是素数，因为4除了能被1和4整除外，还能被2整除，因此‘4’就不是一个素数。”明明对于爸爸的回答很满意，也很快明白了素数的定义。于是明明的爸爸就问明明：“明明，你现在知道了什么是素数，那我现在给你一个整数区间，你能告诉我在这个区间里，一共有多少个素数吗？”&lt;BR&gt;&lt;BR&gt;

   例如：一个区间为[1，10]，则在这个区间里一共有2、3、5、7，总共4个素数。&lt;BR&gt;&lt;BR&gt;

    明明想了想，觉得这很简单，就说：“没问题。”于是明明爸爸就给了明明一个很大的区间，这下明明有点犯难了，由于区间太大，一个一个算过了会很花时间。聪明的明明想到了你，你总是乐于助人。明明想让你帮他写一个程序，用来计算在某一个整数区间内一共有多少个素数。&lt;BR&gt;&lt;BR&gt;

    明明的问题可以归结为：给你一个整数区间，求出在这个区间里共有多少个素数。
</Description>
                <InputSpec xml:space="preserve">你写的程序要求从标准输入设备中读入测试数据作为你所写程序的输入数据。标准输入设备中有多组测试数据，每组测试数据仅有一行，每组测试数据有两个正整数M，N(0 &amp;lt; M &amp;le; N &amp;le; 1000000)，表示个一个整数区间。每组测试数据与其后一组测试数据之间没有任何空行，第一组测试数据前面以及最后一组测试数据后面也都没有任何空行。 </InputSpec>
                <OutputSpec xml:space="preserve">对于每一组测试数据，你写的程序要求计算出一组相应的运算结果，并将每组运算结果作为你所写程序的输出数据依次写入到标准输出设备中。每组运算结果为一个整数，即区间[M, N]内一共有多少个素数。每组运算结果单独形成一行数据，其行首和行尾都没有任何空格，每组运算结果与其后一组运算结果之间没有任何空行，第一组运算结果前面以及最后一组运算结果后面也都没有任何空行。&lt;BR&gt;&lt;BR&gt;

注：通常，显示屏为标准输出设备。
</OutputSpec>
            </Problem>
            <TestData>
                <TimeLimit>10</TimeLimit>
                <InputFile />
                <OutputFile />
                <InputFormat inputType="eof">
                    <Terminator xml:space="preserve" />
                    <Seperator xml:space="preserve" layout="bottom" />
                </InputFormat>
                <OutputFormat>
                    <Header xml:space="preserve" />
                    <Footer xml:space="preserve" />
                    <Seperator xml:space="preserve" layout="bottom" />
                </OutputFormat>
                <TestCase difficulty="sample">
                    <TestInput xml:space="preserve">1 10
</TestInput>
                    <TestOutput xml:space="preserve">4
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">1 100
</TestInput>
                    <TestOutput xml:space="preserve">25
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">10 50
</TestInput>
                    <TestOutput xml:space="preserve">11
</TestOutput>
                </TestCase>
                <TestCase difficulty="special">
                    <TestInput xml:space="preserve">1 10000
</TestInput>
                    <TestOutput xml:space="preserve">1229
</TestOutput>
                </TestCase>
                <TestCase difficulty="sample">
                    <TestInput xml:space="preserve">10 30
</TestInput>
                    <TestOutput xml:space="preserve">6
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">1 100000
</TestInput>
                    <TestOutput xml:space="preserve">9592
</TestOutput>
                </TestCase>
            </TestData>
            <Solution xml:space="preserve" language="cpp" filename="059">#include&lt;iostream.h&gt;
#include &lt;math.h&gt;
int main(){//
    int n,m,i,j; //
    while(cin&gt;&gt;n&gt;&gt;m){//
	if ( n &gt; m ){ int temp=n; n=m; m=temp; }
        int cnt=0; //
        for(i=n;i&lt;=m;i++){ //
            bool isPrim=true; //
            for(j=2;j&lt;=(int)sqrt(i*1.0);j++) //
            if(i%j==0){
            	isPrim=false;//
		break;
	     }
            if(isPrim&amp;&amp;i!=1) cnt++; //
        }    
        cout&lt;&lt;cnt&lt;&lt;endl; //
    }
    return 0; //
}      
</Solution>
        </ProblemArchive>
        <ProblemArchive version="1.0" checked="true">
            <Title>Problem 60 歌德巴赫猜想</Title>
            <Author>z sj</Author>
            <Problem contentType="html">
                <Description xml:space="preserve">歌德巴赫猜想指出：任何一个大于2的偶数，都可以表示成两个素数的和。例如：8 = 3+5， 44 = 13+31等。试编程在6至100范围内验证歌德巴赫猜想。</Description>
                <InputSpec xml:space="preserve">先输入一个正整数n，表示有n组测试数据。所有数据前后没有多余的空行，两组数据之间也没有多余的空行。每组输入数据由一行组成，在接下来的n行中，每行有1个偶数a（6≤a≤100），在行首和行尾没有多余的空格。</InputSpec>
                <OutputSpec xml:space="preserve">对于每组输入，输出满足歌德巴赫猜想两个素数，小的素数的在前，在行首和行尾没有多余的空格。如果有多组结果，输出的第一个素数要求最小。所有数据前后没有多余的空行，两组数据之间也没有多余的空行。</OutputSpec>
            </Problem>
            <TestData>
                <TimeLimit>5</TimeLimit>
                <InputFile />
                <OutputFile />
                <InputFormat inputType="num">
                    <Terminator xml:space="preserve" />
                    <Seperator xml:space="preserve" layout="bottom" />
                </InputFormat>
                <OutputFormat>
                    <Header xml:space="preserve" />
                    <Footer xml:space="preserve" />
                    <Seperator xml:space="preserve" layout="bottom" />
                </OutputFormat>
                <TestCase difficulty="sample">
                    <TestInput xml:space="preserve">8
</TestInput>
                    <TestOutput xml:space="preserve">3 5
</TestOutput>
                </TestCase>
                <TestCase difficulty="sample">
                    <TestInput xml:space="preserve">44
</TestInput>
                    <TestOutput xml:space="preserve">3 41
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">100
</TestInput>
                    <TestOutput xml:space="preserve">3 97
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">6
</TestInput>
                    <TestOutput xml:space="preserve">3 3
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">44
</TestInput>
                    <TestOutput xml:space="preserve">3 41
</TestOutput>
                </TestCase>
                <TestCase difficulty="special">
                    <TestInput xml:space="preserve">98
</TestInput>
                    <TestOutput xml:space="preserve">19 79
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">12
</TestInput>
                    <TestOutput xml:space="preserve">5 7
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">14
</TestInput>
                    <TestOutput xml:space="preserve">3 11
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">96
</TestInput>
                    <TestOutput xml:space="preserve">7 89
</TestOutput>
                </TestCase>
                <TestCase difficulty="trivial">
                    <TestInput xml:space="preserve">90
</TestInput>
                    <TestOutput xml:space="preserve">7 83
</TestOutput>
                </TestCase>
            </TestData>
            <Solution xml:space="preserve" language="cpp" filename="a.cpp">#include&lt;iostream.h&gt;
int isprime(int a)
{
	int i;
	for(i=2;i&lt;a;i++)
		if(a%i==0)
			break;
	if(i==a)
		return 1;
	return 0;
}
int main()
{
	int n,a,i;
	cin&gt;&gt;n;
	while(n--)
	{
		cin&gt;&gt;a;
		for(i=2;i&lt;a;i++)
		{
			if(isprime(i)&amp;&amp;isprime(a-i))
				break;
		}
		cout&lt;&lt;i&lt;&lt;' '&lt;&lt;a-i&lt;&lt;endl;
	}
	return 0;
}
</Solution>
        </ProblemArchive>
    </ProblemList>
</PaperSetter>

